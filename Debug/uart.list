
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  00009070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074d8  080074d8  000084d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e0  080074e0  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e0  080074e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080074e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c54  20000070  08007558  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cc4  08007558  00009cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c595  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a95  00000000  00000000  00025635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  000290d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132f  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039d9  00000000  00000000  0002bc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd9e  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de0db  00000000  00000000  0004b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001294c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad0  00000000  00000000  0012950c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012ffdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007278 	.word	0x08007278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007278 	.word	0x08007278

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 ff50 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f86c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f934 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f908 	bl	8000760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000550:	f000 f8d8 	bl	8000704 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000554:	f003 fce0 	bl	8003f18 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue */
  myQueueHandle = osMessageQueueNew (1, sizeof(uint8_t), &myQueue_attributes);
 8000558:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <main+0x94>)
 800055a:	2101      	movs	r1, #1
 800055c:	2001      	movs	r0, #1
 800055e:	f003 fdd2 	bl	8004106 <osMessageQueueNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <main+0x98>)
 8000566:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTtask, NULL, &UARTTask_attributes);
 8000568:	4a1b      	ldr	r2, [pc, #108]	@ (80005d8 <main+0x9c>)
 800056a:	2100      	movs	r1, #0
 800056c:	481b      	ldr	r0, [pc, #108]	@ (80005dc <main+0xa0>)
 800056e:	f003 fd1d 	bl	8003fac <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a1a      	ldr	r2, [pc, #104]	@ (80005e0 <main+0xa4>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of RedLEDTask */
  RedLEDTaskHandle = osThreadNew(StartRedLEDTask, NULL, &RedLEDTask_attributes);
 8000578:	4a1a      	ldr	r2, [pc, #104]	@ (80005e4 <main+0xa8>)
 800057a:	2100      	movs	r1, #0
 800057c:	481a      	ldr	r0, [pc, #104]	@ (80005e8 <main+0xac>)
 800057e:	f003 fd15 	bl	8003fac <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a19      	ldr	r2, [pc, #100]	@ (80005ec <main+0xb0>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of YellowLEDTask */
  YellowLEDTaskHandle = osThreadNew(StartYellowLEDTask, NULL, &YellowLEDTask_attributes);
 8000588:	4a19      	ldr	r2, [pc, #100]	@ (80005f0 <main+0xb4>)
 800058a:	2100      	movs	r1, #0
 800058c:	4819      	ldr	r0, [pc, #100]	@ (80005f4 <main+0xb8>)
 800058e:	f003 fd0d 	bl	8003fac <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a18      	ldr	r2, [pc, #96]	@ (80005f8 <main+0xbc>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of GreenLEDTask */
  GreenLEDTaskHandle = osThreadNew(StartGreenLEDTask, NULL, &GreenLEDTask_attributes);
 8000598:	4a18      	ldr	r2, [pc, #96]	@ (80005fc <main+0xc0>)
 800059a:	2100      	movs	r1, #0
 800059c:	4818      	ldr	r0, [pc, #96]	@ (8000600 <main+0xc4>)
 800059e:	f003 fd05 	bl	8003fac <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <main+0xc8>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of BlinkRedLEDTask */
  BlinkRedLEDTaskHandle = osThreadNew(StartBlinkRedLEDTask, NULL, &BlinkRedLEDTask_attributes);
 80005a8:	4a17      	ldr	r2, [pc, #92]	@ (8000608 <main+0xcc>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4817      	ldr	r0, [pc, #92]	@ (800060c <main+0xd0>)
 80005ae:	f003 fcfd 	bl	8003fac <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <main+0xd4>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of LCDNotification */
  LCDNotificationHandle = osThreadNew(StartLCDNotificationTask, NULL, &LCDNotification_attributes);
 80005b8:	4a16      	ldr	r2, [pc, #88]	@ (8000614 <main+0xd8>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4816      	ldr	r0, [pc, #88]	@ (8000618 <main+0xdc>)
 80005be:	f003 fcf5 	bl	8003fac <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <main+0xe0>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c8:	f003 fcca 	bl	8003f60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x90>
 80005d0:	080074a8 	.word	0x080074a8
 80005d4:	20000140 	.word	0x20000140
 80005d8:	080073d0 	.word	0x080073d0
 80005dc:	080008e1 	.word	0x080008e1
 80005e0:	20000128 	.word	0x20000128
 80005e4:	080073f4 	.word	0x080073f4
 80005e8:	08000981 	.word	0x08000981
 80005ec:	2000012c 	.word	0x2000012c
 80005f0:	08007418 	.word	0x08007418
 80005f4:	080009e5 	.word	0x080009e5
 80005f8:	20000130 	.word	0x20000130
 80005fc:	0800743c 	.word	0x0800743c
 8000600:	08000a69 	.word	0x08000a69
 8000604:	20000134 	.word	0x20000134
 8000608:	08007460 	.word	0x08007460
 800060c:	08000aed 	.word	0x08000aed
 8000610:	20000138 	.word	0x20000138
 8000614:	08007484 	.word	0x08007484
 8000618:	08000b81 	.word	0x08000b81
 800061c:	2000013c 	.word	0x2000013c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f006 fd32 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemClock_Config+0xdc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a2b      	ldr	r2, [pc, #172]	@ (80006fc <SystemClock_Config+0xdc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xdc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a25      	ldr	r2, [pc, #148]	@ (8000700 <SystemClock_Config+0xe0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000694:	23b4      	movs	r3, #180	@ 0xb4
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa15 	bl	8002ad8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b4:	f000 faee 	bl	8000c94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b8:	f001 fe42 	bl	8002340 <HAL_PWREx_EnableOverDrive>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 fae7 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2105      	movs	r1, #5
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fe7b 	bl	80023e0 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f0:	f000 fad0 	bl	8000c94 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	@ 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 f95f 	bl	8001a04 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 faa2 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000008c 	.word	0x2000008c
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f002 fed8 	bl	800354c <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 fa77 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000e0 	.word	0x200000e0
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b40      	ldr	r3, [pc, #256]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a3f      	ldr	r2, [pc, #252]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b3d      	ldr	r3, [pc, #244]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b39      	ldr	r3, [pc, #228]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a38      	ldr	r2, [pc, #224]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b36      	ldr	r3, [pc, #216]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b32      	ldr	r3, [pc, #200]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a31      	ldr	r2, [pc, #196]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a2a      	ldr	r2, [pc, #168]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_GPIO_Init+0x11c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	4825      	ldr	r0, [pc, #148]	@ (80008d4 <MX_GPIO_Init+0x120>)
 8000840:	f001 f8ac 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|DEFLED_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2122      	movs	r1, #34	@ 0x22
 8000848:	4823      	ldr	r0, [pc, #140]	@ (80008d8 <MX_GPIO_Init+0x124>)
 800084a:	f001 f8a7 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	4822      	ldr	r0, [pc, #136]	@ (80008dc <MX_GPIO_Init+0x128>)
 8000854:	f001 f8a2 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PSH_BTN_Pin */
  GPIO_InitStruct.Pin = PSH_BTN_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PSH_BTN_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4819      	ldr	r0, [pc, #100]	@ (80008d4 <MX_GPIO_Init+0x120>)
 8000870:	f000 ff00 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <MX_GPIO_Init+0x120>)
 800088c:	f000 fef2 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED_Pin DEFLED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|DEFLED_Pin;
 8000890:	2322      	movs	r3, #34	@ 0x22
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_GPIO_Init+0x124>)
 80008a8:	f000 fee4 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_GPIO_Init+0x128>)
 80008c4:	f000 fed6 	bl	8001674 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020400 	.word	0x40020400

080008e0 <StartUARTtask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  xTaskNotify(RedLEDTaskHandle,0,eNoAction);
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <StartUARTtask+0x88>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	2300      	movs	r3, #0
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	f005 fb1f 	bl	8005f34 <xTaskGenericNotify>
	  HAL_UART_Receive(&huart2, rx_data, sizeof(rx_data), HAL_MAX_DELAY);
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2201      	movs	r2, #1
 80008fc:	491b      	ldr	r1, [pc, #108]	@ (800096c <StartUARTtask+0x8c>)
 80008fe:	481c      	ldr	r0, [pc, #112]	@ (8000970 <StartUARTtask+0x90>)
 8000900:	f002 feff 	bl	8003702 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	2201      	movs	r2, #1
 800090a:	4918      	ldr	r1, [pc, #96]	@ (800096c <StartUARTtask+0x8c>)
 800090c:	4818      	ldr	r0, [pc, #96]	@ (8000970 <StartUARTtask+0x90>)
 800090e:	f002 fe6d 	bl	80035ec <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	2202      	movs	r2, #2
 8000918:	4916      	ldr	r1, [pc, #88]	@ (8000974 <StartUARTtask+0x94>)
 800091a:	4815      	ldr	r0, [pc, #84]	@ (8000970 <StartUARTtask+0x90>)
 800091c:	f002 fe66 	bl	80035ec <HAL_UART_Transmit>

	  if(rx_data[0]=='y'){
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <StartUARTtask+0x8c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b79      	cmp	r3, #121	@ 0x79
 8000926:	d1df      	bne.n	80008e8 <StartUARTtask+0x8>

//		  HAL_UART_Transmit(&huart2, (uint8_t*)"SendingBlinkRedLEDTask\r\n", sizeof("SendingBlinkRedLEDTask\r\n"), HAL_MAX_DELAY);
		  xTaskNotify(BlinkRedLEDTaskHandle,0,eNoAction);
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <StartUARTtask+0x98>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	2300      	movs	r3, #0
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	f005 faff 	bl	8005f34 <xTaskGenericNotify>
		  if(xTaskNotifyWait(0, 0, &ulNotifiedValue , portMAX_DELAY)==pdTRUE){
 8000936:	f107 020c 	add.w	r2, r7, #12
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f005 fa97 	bl	8005e74 <xTaskNotifyWait>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d1cd      	bne.n	80008e8 <StartUARTtask+0x8>
			  HAL_UART_Transmit(&huart2, (uint8_t*)"it was a success!!!\r\n", sizeof("it was a success!!!\r\n"), HAL_MAX_DELAY);
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	2216      	movs	r2, #22
 8000952:	490a      	ldr	r1, [pc, #40]	@ (800097c <StartUARTtask+0x9c>)
 8000954:	4806      	ldr	r0, [pc, #24]	@ (8000970 <StartUARTtask+0x90>)
 8000956:	f002 fe49 	bl	80035ec <HAL_UART_Transmit>
			  //clear receive buffer

			  HAL_UART_Receive(&huart2, rx_data, sizeof(rx_data), 200);
 800095a:	23c8      	movs	r3, #200	@ 0xc8
 800095c:	2201      	movs	r2, #1
 800095e:	4903      	ldr	r1, [pc, #12]	@ (800096c <StartUARTtask+0x8c>)
 8000960:	4803      	ldr	r0, [pc, #12]	@ (8000970 <StartUARTtask+0x90>)
 8000962:	f002 fece 	bl	8003702 <HAL_UART_Receive>
	  xTaskNotify(RedLEDTaskHandle,0,eNoAction);
 8000966:	e7bf      	b.n	80008e8 <StartUARTtask+0x8>
 8000968:	2000012c 	.word	0x2000012c
 800096c:	20000144 	.word	0x20000144
 8000970:	200000e0 	.word	0x200000e0
 8000974:	080072f0 	.word	0x080072f0
 8000978:	20000138 	.word	0x20000138
 800097c:	080072f4 	.word	0x080072f4

08000980 <StartRedLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLEDTask */
void StartRedLEDTask(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLEDTask */
	uint32_t ulNotifiedValue;
	uint8_t msgToSend=0;
 8000988:	2300      	movs	r3, #0
 800098a:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	2100      	movs	r1, #0
 8000996:	2000      	movs	r0, #0
 8000998:	f005 fa6c 	bl	8005e74 <xTaskNotifyWait>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f4      	beq.n	800098c <StartRedLEDTask+0xc>
		  osMessageQueuePut(myQueueHandle, &msgToSend, 0U, 0U);
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <StartRedLEDTask+0x54>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	f107 010b 	add.w	r1, r7, #11
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	f003 fc1d 	bl	80041ec <osMessageQueuePut>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2102      	movs	r1, #2
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <StartRedLEDTask+0x58>)
 80009b8:	f000 fff0 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2101      	movs	r1, #1
 80009c0:	4806      	ldr	r0, [pc, #24]	@ (80009dc <StartRedLEDTask+0x5c>)
 80009c2:	f000 ffeb 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <StartRedLEDTask+0x60>)
 80009cc:	f000 ffe6 	bl	800199c <HAL_GPIO_WritePin>
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 80009d0:	e7dc      	b.n	800098c <StartRedLEDTask+0xc>
 80009d2:	bf00      	nop
 80009d4:	20000140 	.word	0x20000140
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020800 	.word	0x40020800

080009e4 <StartYellowLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYellowLEDTask */
void StartYellowLEDTask(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYellowLEDTask */
	uint32_t ulNotifiedValue;
	uint8_t msgToSend=2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 80009f0:	f107 020c 	add.w	r2, r7, #12
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f005 fa3a 	bl	8005e74 <xTaskNotifyWait>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d021      	beq.n	8000a4a <StartYellowLEDTask+0x66>
		  osMessageQueuePut(myQueueHandle, &msgToSend, 0U, 0U);
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <StartYellowLEDTask+0x70>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 010b 	add.w	r1, r7, #11
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2200      	movs	r2, #0
 8000a12:	f003 fbeb 	bl	80041ec <osMessageQueuePut>
//		  osMessagePut(myQueueHandle, (uint32_t)"WE ARE IN YELLOW TASK!", HAL_MAX_DELAY);
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2102      	movs	r1, #2
 8000a1a:	480f      	ldr	r0, [pc, #60]	@ (8000a58 <StartYellowLEDTask+0x74>)
 8000a1c:	f000 ffbe 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2101      	movs	r1, #1
 8000a24:	480d      	ldr	r0, [pc, #52]	@ (8000a5c <StartYellowLEDTask+0x78>)
 8000a26:	f000 ffb9 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <StartYellowLEDTask+0x7c>)
 8000a30:	f000 ffb4 	bl	800199c <HAL_GPIO_WritePin>
		  osDelay(5000);
 8000a34:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a38:	f003 fb4a 	bl	80040d0 <osDelay>
		  xTaskNotify(GreenLEDTaskHandle,0,eNoAction);
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <StartYellowLEDTask+0x80>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	f005 fa75 	bl	8005f34 <xTaskGenericNotify>
	  }
    osDelay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f003 fb40 	bl	80040d0 <osDelay>
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 8000a50:	e7ce      	b.n	80009f0 <StartYellowLEDTask+0xc>
 8000a52:	bf00      	nop
 8000a54:	20000140 	.word	0x20000140
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	20000134 	.word	0x20000134

08000a68 <StartGreenLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGreenLEDTask */
void StartGreenLEDTask(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGreenLEDTask */
	uint32_t ulNotifiedValue;
	uint8_t msgToSend=3;
 8000a70:	2303      	movs	r3, #3
 8000a72:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f005 f9f8 	bl	8005e74 <xTaskNotifyWait>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f4      	beq.n	8000a74 <StartGreenLEDTask+0xc>
		  osMessageQueuePut(myQueueHandle, &msgToSend, 0U, 0U);
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <StartGreenLEDTask+0x70>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	f107 010b 	add.w	r1, r7, #11
 8000a92:	2300      	movs	r3, #0
 8000a94:	2200      	movs	r2, #0
 8000a96:	f003 fba9 	bl	80041ec <osMessageQueuePut>
		  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	480f      	ldr	r0, [pc, #60]	@ (8000adc <StartGreenLEDTask+0x74>)
 8000aa0:	f000 ff7c 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <StartGreenLEDTask+0x78>)
 8000aaa:	f000 ff77 	bl	800199c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <StartGreenLEDTask+0x7c>)
 8000ab4:	f000 ff72 	bl	800199c <HAL_GPIO_WritePin>
		  osDelay(3000);
 8000ab8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000abc:	f003 fb08 	bl	80040d0 <osDelay>
		  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <StartGreenLEDTask+0x7c>)
 8000ac4:	f000 ff83 	bl	80019ce <HAL_GPIO_TogglePin>
		  xTaskNotify(UARTTaskHandle,0,eNoAction);
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <StartGreenLEDTask+0x80>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f005 fa2f 	bl	8005f34 <xTaskGenericNotify>
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 8000ad6:	e7cd      	b.n	8000a74 <StartGreenLEDTask+0xc>
 8000ad8:	20000140 	.word	0x20000140
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	20000128 	.word	0x20000128

08000aec <StartBlinkRedLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkRedLEDTask */
void StartBlinkRedLEDTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkRedLEDTask */
	uint32_t ulNotifiedValue;
	uint8_t msgToSend=1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f005 f9b6 	bl	8005e74 <xTaskNotifyWait>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d02a      	beq.n	8000b64 <StartBlinkRedLEDTask+0x78>
//	  if(ulTaskNotifyTake(pdFALSE, portMAX_DELAY)){
		  HAL_UART_Transmit(&huart2, (uint8_t*)"INBLINKLEDDDDD\r\n", sizeof("INBLINKLEDDDDD\r\n"), HAL_MAX_DELAY);
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	2211      	movs	r2, #17
 8000b14:	4915      	ldr	r1, [pc, #84]	@ (8000b6c <StartBlinkRedLEDTask+0x80>)
 8000b16:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <StartBlinkRedLEDTask+0x84>)
 8000b18:	f002 fd68 	bl	80035ec <HAL_UART_Transmit>
		  osMessageQueuePut(myQueueHandle, &msgToSend, 0U, 0U);
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <StartBlinkRedLEDTask+0x88>)
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	f107 010f 	add.w	r1, r7, #15
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	f003 fb60 	bl	80041ec <osMessageQueuePut>
//		  osMessagePut(myQueueHandle,(uint32_t)"WE ARE IN rEDBLINKINGGGGG TASK!", HAL_MAX_DELAY);
		  int cnt=0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
		  while(cnt<6){
 8000b30:	e00a      	b.n	8000b48 <StartBlinkRedLEDTask+0x5c>
			  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000b32:	2102      	movs	r1, #2
 8000b34:	4810      	ldr	r0, [pc, #64]	@ (8000b78 <StartBlinkRedLEDTask+0x8c>)
 8000b36:	f000 ff4a 	bl	80019ce <HAL_GPIO_TogglePin>
			  osDelay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b3e:	f003 fac7 	bl	80040d0 <osDelay>
			  cnt++;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
		  while(cnt<6){
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	ddf1      	ble.n	8000b32 <StartBlinkRedLEDTask+0x46>
		  }
		  osDelay(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b52:	f003 fabd 	bl	80040d0 <osDelay>

		  xTaskNotify(YellowLEDTaskHandle,0,eNoAction);
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <StartBlinkRedLEDTask+0x90>)
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f005 f9e8 	bl	8005f34 <xTaskGenericNotify>
	  }
    osDelay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f003 fab3 	bl	80040d0 <osDelay>
	  if(xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY)){
 8000b6a:	e7c5      	b.n	8000af8 <StartBlinkRedLEDTask+0xc>
 8000b6c:	0800730c 	.word	0x0800730c
 8000b70:	200000e0 	.word	0x200000e0
 8000b74:	20000140 	.word	0x20000140
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	20000130 	.word	0x20000130

08000b80 <StartLCDNotificationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCDNotificationTask */
void StartLCDNotificationTask(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDNotificationTask */
//	osEvent taskMsg;
	QUEUE_t msg;

  HD44780_Init(2);
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f000 fa23 	bl	8000fd4 <HD44780_Init>
  HD44780_Clear();
 8000b8e:	f000 faa5 	bl	80010dc <HD44780_Clear>
  HD44780_Backlight();
 8000b92:	f000 fb41 	bl	8001218 <HD44780_Backlight>
  for(;;)
  {


//	  HAL_UART_Transmit(&huart2, (uint8_t*)"INLCDTAKS\r\n", sizeof("INLCDTAKS\r\n"), osWaitForever);
	  if(osMessageQueueGet(myQueueHandle, &msg, NULL, HAL_MAX_DELAY) == osOK){
 8000b96:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <StartLCDNotificationTask+0xcc>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	f107 010c 	add.w	r1, r7, #12
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f003 fb82 	bl	80042ac <osMessageQueueGet>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f3      	bne.n	8000b96 <StartLCDNotificationTask+0x16>

		  if(msg.id==RED_ON){
 8000bae:	7b3b      	ldrb	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10e      	bne.n	8000bd2 <StartLCDNotificationTask+0x52>
//			  HD44780_Init(2);
//			  HD44780_Clear();
//			  HD44780_Backlight();
			  HD44780_SetCursor(0,0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 faa6 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("Still waiting...");
 8000bbc:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <StartLCDNotificationTask+0xd0>)
 8000bbe:	f000 fb15 	bl	80011ec <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 fa9f 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr(" :(             ");
 8000bca:	4822      	ldr	r0, [pc, #136]	@ (8000c54 <StartLCDNotificationTask+0xd4>)
 8000bcc:	f000 fb0e 	bl	80011ec <HD44780_PrintStr>
 8000bd0:	e7e1      	b.n	8000b96 <StartLCDNotificationTask+0x16>

		  }
		  else if(msg.id==RED_BLINK_ON){
 8000bd2:	7b3b      	ldrb	r3, [r7, #12]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d110      	bne.n	8000bfa <StartLCDNotificationTask+0x7a>
//			  HD44780_Init(2);
			  HD44780_Clear();
 8000bd8:	f000 fa80 	bl	80010dc <HD44780_Clear>
//			  HD44780_Backlight();
			  HD44780_SetCursor(0,0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 fa92 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("Ok, we will");
 8000be4:	481c      	ldr	r0, [pc, #112]	@ (8000c58 <StartLCDNotificationTask+0xd8>)
 8000be6:	f000 fb01 	bl	80011ec <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 8000bea:	2101      	movs	r1, #1
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fa8b 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("start soon :)");
 8000bf2:	481a      	ldr	r0, [pc, #104]	@ (8000c5c <StartLCDNotificationTask+0xdc>)
 8000bf4:	f000 fafa 	bl	80011ec <HD44780_PrintStr>
 8000bf8:	e7cd      	b.n	8000b96 <StartLCDNotificationTask+0x16>

		  }
		  else if(msg.id==YELLOW_ON){
 8000bfa:	7b3b      	ldrb	r3, [r7, #12]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d110      	bne.n	8000c22 <StartLCDNotificationTask+0xa2>
//			  HD44780_Init(2);
			  HD44780_Clear();
 8000c00:	f000 fa6c 	bl	80010dc <HD44780_Clear>
//			  HD44780_Backlight();
			  HD44780_SetCursor(0,0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fa7e 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("Working on it!");
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <StartLCDNotificationTask+0xe0>)
 8000c0e:	f000 faed 	bl	80011ec <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 8000c12:	2101      	movs	r1, #1
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 fa77 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr(" :D            ");
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <StartLCDNotificationTask+0xe4>)
 8000c1c:	f000 fae6 	bl	80011ec <HD44780_PrintStr>
 8000c20:	e7b9      	b.n	8000b96 <StartLCDNotificationTask+0x16>

		  }
		  else if(msg.id==GREEN_ON){
 8000c22:	7b3b      	ldrb	r3, [r7, #12]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d1b6      	bne.n	8000b96 <StartLCDNotificationTask+0x16>
//			  HD44780_Init(2);
			  HD44780_Clear();
 8000c28:	f000 fa58 	bl	80010dc <HD44780_Clear>
//			  HD44780_Backlight();
			  HD44780_SetCursor(0,0);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 fa6a 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("All done,     ");
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <StartLCDNotificationTask+0xe8>)
 8000c36:	f000 fad9 	bl	80011ec <HD44780_PrintStr>
			  HD44780_SetCursor(0,1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 fa63 	bl	8001108 <HD44780_SetCursor>
			  HD44780_PrintStr("have a good day!");
 8000c42:	480a      	ldr	r0, [pc, #40]	@ (8000c6c <StartLCDNotificationTask+0xec>)
 8000c44:	f000 fad2 	bl	80011ec <HD44780_PrintStr>
	  if(osMessageQueueGet(myQueueHandle, &msg, NULL, HAL_MAX_DELAY) == osOK){
 8000c48:	e7a5      	b.n	8000b96 <StartLCDNotificationTask+0x16>
 8000c4a:	bf00      	nop
 8000c4c:	20000140 	.word	0x20000140
 8000c50:	08007320 	.word	0x08007320
 8000c54:	08007334 	.word	0x08007334
 8000c58:	08007348 	.word	0x08007348
 8000c5c:	08007354 	.word	0x08007354
 8000c60:	08007364 	.word	0x08007364
 8000c64:	08007374 	.word	0x08007374
 8000c68:	08007384 	.word	0x08007384
 8000c6c:	08007394 	.word	0x08007394

08000c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c82:	f000 fbd1 	bl	8001428 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40001000 	.word	0x40001000

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a11      	ldr	r2, [pc, #68]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x54>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	210f      	movs	r1, #15
 8000ce2:	f06f 0001 	mvn.w	r0, #1
 8000ce6:	f000 fc9b 	bl	8001620 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_I2C_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12c      	bne.n	8000d74 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3c:	2312      	movs	r3, #18
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <HAL_I2C_MspInit+0x8c>)
 8000d54:	f000 fc8e 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <HAL_UART_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12b      	bne.n	8000e02 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de2:	230c      	movs	r3, #12
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_UART_MspInit+0x8c>)
 8000dfe:	f000 fc39 	bl	8001674 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	@ 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b33      	ldr	r3, [pc, #204]	@ (8000efc <HAL_InitTick+0xe4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	4a32      	ldr	r2, [pc, #200]	@ (8000efc <HAL_InitTick+0xe4>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e38:	4b30      	ldr	r3, [pc, #192]	@ (8000efc <HAL_InitTick+0xe4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e44:	f107 0210 	add.w	r2, r7, #16
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fbe0 	bl	8002614 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d103      	bne.n	8000e66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5e:	f001 fbb1 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8000e62:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e64:	e004      	b.n	8000e70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e66:	f001 fbad 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e72:	4a23      	ldr	r2, [pc, #140]	@ (8000f00 <HAL_InitTick+0xe8>)
 8000e74:	fba2 2303 	umull	r2, r3, r2, r3
 8000e78:	0c9b      	lsrs	r3, r3, #18
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <HAL_InitTick+0xec>)
 8000e80:	4a21      	ldr	r2, [pc, #132]	@ (8000f08 <HAL_InitTick+0xf0>)
 8000e82:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_InitTick+0xec>)
 8000e86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_InitTick+0xec>)
 8000e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_InitTick+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_InitTick+0xec>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_InitTick+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ea4:	4817      	ldr	r0, [pc, #92]	@ (8000f04 <HAL_InitTick+0xec>)
 8000ea6:	f002 f8b5 	bl	8003014 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11b      	bne.n	8000ef0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eb8:	4812      	ldr	r0, [pc, #72]	@ (8000f04 <HAL_InitTick+0xec>)
 8000eba:	f002 f905 	bl	80030c8 <HAL_TIM_Base_Start_IT>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d111      	bne.n	8000ef0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f000 fbc3 	bl	8001658 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d808      	bhi.n	8000eea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2036      	movs	r0, #54	@ 0x36
 8000ede:	f000 fb9f 	bl	8001620 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_InitTick+0xf4>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	e002      	b.n	8000ef0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3738      	adds	r7, #56	@ 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	20000148 	.word	0x20000148
 8000f08:	40001000 	.word	0x40001000
 8000f0c:	20000014 	.word	0x20000014

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <NMI_Handler+0x4>

08000f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <MemManage_Handler+0x4>

08000f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <TIM6_DAC_IRQHandler+0x10>)
 8000f4e:	f002 f92b 	bl	80031a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000148 	.word	0x20000148

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f84:	f7ff ffea 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f006 f8d9 	bl	8007164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fac3 	bl	800053c <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc4:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 8000fc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fcc:	20004cc4 	.word	0x20004cc4

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000fde:	4a38      	ldr	r2, [pc, #224]	@ (80010c0 <HD44780_Init+0xec>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000fe4:	4b37      	ldr	r3, [pc, #220]	@ (80010c4 <HD44780_Init+0xf0>)
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <HD44780_Init+0xf4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <HD44780_Init+0xec>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d907      	bls.n	8001008 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000ff8:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <HD44780_Init+0xf4>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <HD44780_Init+0xf4>)
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e006      	b.n	8001016 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <HD44780_Init+0xf4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <HD44780_Init+0xf4>)
 8001014:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001016:	f000 f993 	bl	8001340 <DelayInit>
  HAL_Delay(50);
 800101a:	2032      	movs	r0, #50	@ 0x32
 800101c:	f000 fa24 	bl	8001468 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001020:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <HD44780_Init+0xf0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f951 	bl	80012cc <ExpanderWrite>
  HAL_Delay(1000);
 800102a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102e:	f000 fa1b 	bl	8001468 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001032:	2030      	movs	r0, #48	@ 0x30
 8001034:	f000 f939 	bl	80012aa <Write4Bits>
  DelayUS(4500);
 8001038:	f241 1094 	movw	r0, #4500	@ 0x1194
 800103c:	f000 f9aa 	bl	8001394 <DelayUS>

  Write4Bits(0x03 << 4);
 8001040:	2030      	movs	r0, #48	@ 0x30
 8001042:	f000 f932 	bl	80012aa <Write4Bits>
  DelayUS(4500);
 8001046:	f241 1094 	movw	r0, #4500	@ 0x1194
 800104a:	f000 f9a3 	bl	8001394 <DelayUS>

  Write4Bits(0x03 << 4);
 800104e:	2030      	movs	r0, #48	@ 0x30
 8001050:	f000 f92b 	bl	80012aa <Write4Bits>
  DelayUS(4500);
 8001054:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001058:	f000 f99c 	bl	8001394 <DelayUS>

  Write4Bits(0x02 << 4);
 800105c:	2020      	movs	r0, #32
 800105e:	f000 f924 	bl	80012aa <Write4Bits>
  DelayUS(100);
 8001062:	2064      	movs	r0, #100	@ 0x64
 8001064:	f000 f996 	bl	8001394 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HD44780_Init+0xf4>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f8dc 	bl	8001230 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <HD44780_Init+0xf8>)
 800107a:	2204      	movs	r2, #4
 800107c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800107e:	f000 f875 	bl	800116c <HD44780_Display>
  HD44780_Clear();
 8001082:	f000 f82b 	bl	80010dc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HD44780_Init+0xfc>)
 8001088:	2202      	movs	r2, #2
 800108a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HD44780_Init+0xfc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8ca 	bl	8001230 <SendCommand>
  DelayUS(4500);
 800109c:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010a0:	f000 f978 	bl	8001394 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010a4:	490b      	ldr	r1, [pc, #44]	@ (80010d4 <HD44780_Init+0x100>)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f876 	bl	8001198 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010ac:	490a      	ldr	r1, [pc, #40]	@ (80010d8 <HD44780_Init+0x104>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 f872 	bl	8001198 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010b4:	f000 f81d 	bl	80010f2 <HD44780_Home>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000193 	.word	0x20000193
 80010c4:	20000194 	.word	0x20000194
 80010c8:	20000190 	.word	0x20000190
 80010cc:	20000191 	.word	0x20000191
 80010d0:	20000192 	.word	0x20000192
 80010d4:	20000004 	.word	0x20000004
 80010d8:	2000000c 	.word	0x2000000c

080010dc <HD44780_Clear>:

void HD44780_Clear()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 f8a5 	bl	8001230 <SendCommand>
  DelayUS(2000);
 80010e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ea:	f000 f953 	bl	8001394 <DelayUS>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HD44780_Home>:

void HD44780_Home()
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 f89a 	bl	8001230 <SendCommand>
  DelayUS(2000);
 80010fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001100:	f000 f948 	bl	8001394 <DelayUS>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HD44780_SetCursor+0x5c>)
 800111a:	f107 0408 	add.w	r4, r7, #8
 800111e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HD44780_SetCursor+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	429a      	cmp	r2, r3
 800112c:	d303      	bcc.n	8001136 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HD44780_SetCursor+0x60>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3b01      	subs	r3, #1
 8001134:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	3318      	adds	r3, #24
 800113c:	443b      	add	r3, r7
 800113e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4413      	add	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	b25b      	sxtb	r3, r3
 800114c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001150:	b25b      	sxtb	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f86b 	bl	8001230 <SendCommand>
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	080073a8 	.word	0x080073a8
 8001168:	20000193 	.word	0x20000193

0800116c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HD44780_Display+0x28>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HD44780_Display+0x28>)
 800117c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HD44780_Display+0x28>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f851 	bl	8001230 <SendCommand>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000191 	.word	0x20000191

08001198 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f837 	bl	8001230 <SendCommand>
  for (int i=0; i<8; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e009      	b.n	80011dc <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f83b 	bl	800124c <SendChar>
  for (int i=0; i<8; i++)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b07      	cmp	r3, #7
 80011e0:	ddf2      	ble.n	80011c8 <HD44780_CreateSpecialChar+0x30>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80011f4:	e006      	b.n	8001204 <HD44780_PrintStr+0x18>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f824 	bl	800124c <SendChar>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f4      	bne.n	80011f6 <HD44780_PrintStr+0xa>
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HD44780_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void HD44780_Backlight(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HD44780_Backlight+0x14>)
 800121e:	2208      	movs	r2, #8
 8001220:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f852 	bl	80012cc <ExpanderWrite>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000194 	.word	0x20000194

08001230 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f812 	bl	8001268 <Send>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <SendChar>:

static void SendChar(uint8_t ch)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2101      	movs	r1, #1
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f804 	bl	8001268 <Send>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f023 030f 	bic.w	r3, r3, #15
 800127e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f80b 	bl	80012aa <Write4Bits>
  Write4Bits((lownib)|mode);
 8001294:	7bba      	ldrb	r2, [r7, #14]
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	4313      	orrs	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f804 	bl	80012aa <Write4Bits>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f808 	bl	80012cc <ExpanderWrite>
  PulseEnable(value);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f820 	bl	8001304 <PulseEnable>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <ExpanderWrite+0x30>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4313      	orrs	r3, r2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012e2:	f107 020f 	add.w	r2, r7, #15
 80012e6:	230a      	movs	r3, #10
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	214e      	movs	r1, #78	@ 0x4e
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <ExpanderWrite+0x34>)
 80012f0:	f000 fccc 	bl	8001c8c <HAL_I2C_Master_Transmit>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000194 	.word	0x20000194
 8001300:	2000008c 	.word	0x2000008c

08001304 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffd8 	bl	80012cc <ExpanderWrite>
  DelayUS(20);
 800131c:	2014      	movs	r0, #20
 800131e:	f000 f839 	bl	8001394 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f023 0304 	bic.w	r3, r3, #4
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ffce 	bl	80012cc <ExpanderWrite>
  DelayUS(20);
 8001330:	2014      	movs	r0, #20
 8001332:	f000 f82f 	bl	8001394 <DelayUS>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <DelayInit>:

static void DelayInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <DelayInit+0x4c>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a10      	ldr	r2, [pc, #64]	@ (800138c <DelayInit+0x4c>)
 800134a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800134e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001350:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <DelayInit+0x4c>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <DelayInit+0x4c>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <DelayInit+0x50>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <DelayInit+0x50>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <DelayInit+0x50>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <DelayInit+0x50>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <DelayInit+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800137a:	bf00      	nop
  __ASM volatile ("NOP");
 800137c:	bf00      	nop
  __ASM volatile ("NOP");
 800137e:	bf00      	nop
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000edf0 	.word	0xe000edf0
 8001390:	e0001000 	.word	0xe0001000

08001394 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <DelayUS+0x44>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <DelayUS+0x48>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9a      	lsrs	r2, r3, #18
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <DelayUS+0x4c>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <DelayUS+0x4c>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f6      	bhi.n	80013b6 <DelayUS+0x22>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	e0001000 	.word	0xe0001000

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <HAL_Init+0x40>)
 80013ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_Init+0x40>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_Init+0x40>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f8fc 	bl	800160a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fd00 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001418:	f7ff fc42 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000018 	.word	0x20000018
 800144c:	20000198 	.word	0x20000198

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000198 	.word	0x20000198

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000018 	.word	0x20000018

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff4c 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001632:	f7ff ff61 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001636:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	6978      	ldr	r0, [r7, #20]
 800163e:	f7ff ffb1 	bl	80015a4 <NVIC_EncodePriority>
 8001642:	4602      	mov	r2, r0
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff80 	bl	8001550 <__NVIC_SetPriority>
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff54 	bl	8001514 <__NVIC_EnableIRQ>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e165      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8154 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80ae 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001974 <HAL_GPIO_Init+0x300>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a5c      	ldr	r2, [pc, #368]	@ (8001974 <HAL_GPIO_Init+0x300>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <HAL_GPIO_Init+0x300>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001816:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4f      	ldr	r2, [pc, #316]	@ (800197c <HAL_GPIO_Init+0x308>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x21a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <HAL_GPIO_Init+0x30c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x216>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4d      	ldr	r2, [pc, #308]	@ (8001984 <HAL_GPIO_Init+0x310>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x212>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4c      	ldr	r2, [pc, #304]	@ (8001988 <HAL_GPIO_Init+0x314>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x20e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4b      	ldr	r2, [pc, #300]	@ (800198c <HAL_GPIO_Init+0x318>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x20a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4a      	ldr	r2, [pc, #296]	@ (8001990 <HAL_GPIO_Init+0x31c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x206>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a49      	ldr	r2, [pc, #292]	@ (8001994 <HAL_GPIO_Init+0x320>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x202>
 8001872:	2306      	movs	r3, #6
 8001874:	e00c      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001876:	2307      	movs	r3, #7
 8001878:	e00a      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800187a:	2305      	movs	r3, #5
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800187e:	2304      	movs	r3, #4
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x21c>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	@ (8001978 <HAL_GPIO_Init+0x304>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <HAL_GPIO_Init+0x324>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a31      	ldr	r2, [pc, #196]	@ (8001998 <HAL_GPIO_Init+0x324>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_GPIO_Init+0x324>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a26      	ldr	r2, [pc, #152]	@ (8001998 <HAL_GPIO_Init+0x324>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_GPIO_Init+0x324>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001926:	4a1c      	ldr	r2, [pc, #112]	@ (8001998 <HAL_GPIO_Init+0x324>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <HAL_GPIO_Init+0x324>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001950:	4a11      	ldr	r2, [pc, #68]	@ (8001998 <HAL_GPIO_Init+0x324>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f ae96 	bls.w	8001690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40021400 	.word	0x40021400
 8001994:	40021800 	.word	0x40021800
 8001998:	40013c00 	.word	0x40013c00

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	887b      	ldrh	r3, [r7, #2]
 80019ee:	400b      	ands	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e12b      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff f964 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	@ 0x24
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a68:	f000 fdac 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a81      	ldr	r2, [pc, #516]	@ (8001c78 <HAL_I2C_Init+0x274>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d807      	bhi.n	8001a88 <HAL_I2C_Init+0x84>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a80      	ldr	r2, [pc, #512]	@ (8001c7c <HAL_I2C_Init+0x278>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e006      	b.n	8001a96 <HAL_I2C_Init+0x92>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c80 <HAL_I2C_Init+0x27c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bf94      	ite	ls
 8001a90:	2301      	movls	r3, #1
 8001a92:	2300      	movhi	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e7      	b.n	8001c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4a78      	ldr	r2, [pc, #480]	@ (8001c84 <HAL_I2C_Init+0x280>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	@ (8001c78 <HAL_I2C_Init+0x274>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d802      	bhi.n	8001ad8 <HAL_I2C_Init+0xd4>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	e009      	b.n	8001aec <HAL_I2C_Init+0xe8>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	4a69      	ldr	r2, [pc, #420]	@ (8001c88 <HAL_I2C_Init+0x284>)
 8001ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	3301      	adds	r3, #1
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001afe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	495c      	ldr	r1, [pc, #368]	@ (8001c78 <HAL_I2C_Init+0x274>)
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	d819      	bhi.n	8001b40 <HAL_I2C_Init+0x13c>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e59      	subs	r1, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1a:	1c59      	adds	r1, r3, #1
 8001b1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b20:	400b      	ands	r3, r1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_I2C_Init+0x138>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1e59      	subs	r1, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	e051      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e04f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <HAL_I2C_Init+0x168>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1e58      	subs	r0, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf0c      	ite	eq
 8001b64:	2301      	moveq	r3, #1
 8001b66:	2300      	movne	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e012      	b.n	8001b92 <HAL_I2C_Init+0x18e>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	0099      	lsls	r1, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b82:	3301      	adds	r3, #1
 8001b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf0c      	ite	eq
 8001b8c:	2301      	moveq	r3, #1
 8001b8e:	2300      	movne	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x196>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e022      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_I2C_Init+0x1bc>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1e58      	subs	r0, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	440b      	add	r3, r1
 8001bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bbe:	e00f      	b.n	8001be0 <HAL_I2C_Init+0x1dc>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	6809      	ldr	r1, [r1, #0]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6911      	ldr	r1, [r2, #16]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68d2      	ldr	r2, [r2, #12]
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	000186a0 	.word	0x000186a0
 8001c7c:	001e847f 	.word	0x001e847f
 8001c80:	003d08ff 	.word	0x003d08ff
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	10624dd3 	.word	0x10624dd3

08001c8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	817b      	strh	r3, [r7, #10]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fbd6 	bl	8001450 <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	f040 80e0 	bne.w	8001e74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2319      	movs	r3, #25
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4970      	ldr	r1, [pc, #448]	@ (8001e80 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f964 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e0d3      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_I2C_Master_Transmit+0x50>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e0cc      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d007      	beq.n	8001d02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2221      	movs	r2, #33	@ 0x21
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	893a      	ldrh	r2, [r7, #8]
 8001d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a50      	ldr	r2, [pc, #320]	@ (8001e84 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d44:	8979      	ldrh	r1, [r7, #10]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f89c 	bl	8001e88 <I2C_MasterRequestWrite>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e08d      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d70:	e066      	b.n	8001e40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	6a39      	ldr	r1, [r7, #32]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa22 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d107      	bne.n	8001d9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06b      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d11b      	bne.n	8001e14 <HAL_I2C_Master_Transmit+0x188>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d017      	beq.n	8001e14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fa19 	bl	8002250 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e01a      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d194      	bne.n	8001d72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000

08001e88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	460b      	mov	r3, r1
 8001e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d006      	beq.n	8001eb2 <I2C_MasterRequestWrite+0x2a>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d003      	beq.n	8001eb2 <I2C_MasterRequestWrite+0x2a>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e00b      	b.n	8001edc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	2b12      	cmp	r3, #18
 8001eca:	d107      	bne.n	8001edc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f84f 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f02:	d103      	bne.n	8001f0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e035      	b.n	8001f7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f18:	d108      	bne.n	8001f2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	e01b      	b.n	8001f64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f2c:	897b      	ldrh	r3, [r7, #10]
 8001f2e:	11db      	asrs	r3, r3, #7
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0306 	and.w	r3, r3, #6
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f063 030f 	orn	r3, r3, #15
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	490e      	ldr	r1, [pc, #56]	@ (8001f84 <I2C_MasterRequestWrite+0xfc>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f898 	bl	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e010      	b.n	8001f7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <I2C_MasterRequestWrite+0x100>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f888 	bl	8002080 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	00010008 	.word	0x00010008
 8001f88:	00010002 	.word	0x00010002

08001f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f9c:	e048      	b.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d044      	beq.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff fa53 	bl	8001450 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d139      	bne.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10d      	bne.n	8001fe2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf0c      	ite	eq
 8001fd8:	2301      	moveq	r3, #1
 8001fda:	2300      	movne	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	e00c      	b.n	8001ffc <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4013      	ands	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d116      	bne.n	8002030 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f043 0220 	orr.w	r2, r3, #32
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e023      	b.n	8002078 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10d      	bne.n	8002056 <I2C_WaitOnFlagUntilTimeout+0xca>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	43da      	mvns	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	4013      	ands	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	e00c      	b.n	8002070 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	43da      	mvns	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	429a      	cmp	r2, r3
 8002074:	d093      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208e:	e071      	b.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209e:	d123      	bne.n	80020e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e067      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d041      	beq.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7ff f9ae 	bl	8001450 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d136      	bne.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10c      	bne.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e00b      	b.n	8002142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e021      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e00b      	b.n	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f af6d 	bne.w	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021cc:	e034      	b.n	8002238 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f886 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e034      	b.n	8002248 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d028      	beq.n	8002238 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7ff f933 	bl	8001450 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d11d      	bne.n	8002238 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	2b80      	cmp	r3, #128	@ 0x80
 8002208:	d016      	beq.n	8002238 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f043 0220 	orr.w	r2, r3, #32
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e007      	b.n	8002248 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b80      	cmp	r3, #128	@ 0x80
 8002244:	d1c3      	bne.n	80021ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800225c:	e034      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f83e 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e034      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d028      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff f8eb 	bl	8001450 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11d      	bne.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b04      	cmp	r3, #4
 8002298:	d016      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1c3      	bne.n	800225e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f6:	d11b      	bne.n	8002330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	4a1f      	ldr	r2, [pc, #124]	@ (80023d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	@ 0x40
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002366:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800236c:	f7ff f870 	bl	8001450 <HAL_GetTick>
 8002370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002372:	e009      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002374:	f7ff f86c 	bl	8001450 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002382:	d901      	bls.n	8002388 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e01f      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002388:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002394:	d1ee      	bne.n	8002374 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800239c:	f7ff f858 	bl	8001450 <HAL_GetTick>
 80023a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a2:	e009      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a4:	f7ff f854 	bl	8001450 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023b2:	d901      	bls.n	80023b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e007      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b8:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023c4:	d1ee      	bne.n	80023a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	420e0040 	.word	0x420e0040
 80023d8:	40007000 	.word	0x40007000
 80023dc:	420e0044 	.word	0x420e0044

080023e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0cc      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b68      	ldr	r3, [pc, #416]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d90c      	bls.n	800241c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b65      	ldr	r3, [pc, #404]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b63      	ldr	r3, [pc, #396]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b8      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b59      	ldr	r3, [pc, #356]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a58      	ldr	r2, [pc, #352]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800243e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a52      	ldr	r2, [pc, #328]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	494d      	ldr	r1, [pc, #308]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d044      	beq.n	8002500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d119      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e07f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	2b03      	cmp	r3, #3
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e067      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4934      	ldr	r1, [pc, #208]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe ffbe 	bl	8001450 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe ffba 	bl	8001450 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e04f      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d20c      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e032      	b.n	800258e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4916      	ldr	r1, [pc, #88]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	490e      	ldr	r1, [pc, #56]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002566:	f000 f887 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800256a:	4602      	mov	r2, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	490a      	ldr	r1, [pc, #40]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fc46 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023c00 	.word	0x40023c00
 800259c:	40023800 	.word	0x40023800
 80025a0:	080074c0 	.word	0x080074c0
 80025a4:	20000000 	.word	0x20000000
 80025a8:	20000014 	.word	0x20000014

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	080074d0 	.word	0x080074d0

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffdc 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	080074d0 	.word	0x080074d0

08002614 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	220f      	movs	r2, #15
 8002622:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002630:	4b0f      	ldr	r3, [pc, #60]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_RCC_GetClockConfig+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40023c00 	.word	0x40023c00

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b0ae      	sub	sp, #184	@ 0xb8
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269e:	4bcb      	ldr	r3, [pc, #812]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	f200 8206 	bhi.w	8002ab8 <HAL_RCC_GetSysClockFreq+0x440>
 80026ac:	a201      	add	r2, pc, #4	@ (adr r2, 80026b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	08002ab9 	.word	0x08002ab9
 80026bc:	08002ab9 	.word	0x08002ab9
 80026c0:	08002ab9 	.word	0x08002ab9
 80026c4:	080026f1 	.word	0x080026f1
 80026c8:	08002ab9 	.word	0x08002ab9
 80026cc:	08002ab9 	.word	0x08002ab9
 80026d0:	08002ab9 	.word	0x08002ab9
 80026d4:	080026f9 	.word	0x080026f9
 80026d8:	08002ab9 	.word	0x08002ab9
 80026dc:	08002ab9 	.word	0x08002ab9
 80026e0:	08002ab9 	.word	0x08002ab9
 80026e4:	080028e9 	.word	0x080028e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4bb9      	ldr	r3, [pc, #740]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ee:	e1e7      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4bb8      	ldr	r3, [pc, #736]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026f6:	e1e3      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4bb4      	ldr	r3, [pc, #720]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002700:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002704:	4bb1      	ldr	r3, [pc, #708]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d071      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002710:	4bae      	ldr	r3, [pc, #696]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	2200      	movs	r2, #0
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800271c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002720:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002728:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4621      	mov	r1, r4
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	6439      	str	r1, [r7, #64]	@ 0x40
 8002754:	4629      	mov	r1, r5
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	647b      	str	r3, [r7, #68]	@ 0x44
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002768:	4649      	mov	r1, r9
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002772:	4641      	mov	r1, r8
 8002774:	018a      	lsls	r2, r1, #6
 8002776:	4641      	mov	r1, r8
 8002778:	1a51      	subs	r1, r2, r1
 800277a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800277c:	4649      	mov	r1, r9
 800277e:	eb63 0301 	sbc.w	r3, r3, r1
 8002782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002790:	4649      	mov	r1, r9
 8002792:	00cb      	lsls	r3, r1, #3
 8002794:	4641      	mov	r1, r8
 8002796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279a:	4641      	mov	r1, r8
 800279c:	00ca      	lsls	r2, r1, #3
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	4622      	mov	r2, r4
 80027a6:	189b      	adds	r3, r3, r2
 80027a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80027aa:	462b      	mov	r3, r5
 80027ac:	460a      	mov	r2, r1
 80027ae:	eb42 0303 	adc.w	r3, r2, r3
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027c0:	4629      	mov	r1, r5
 80027c2:	024b      	lsls	r3, r1, #9
 80027c4:	4621      	mov	r1, r4
 80027c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ca:	4621      	mov	r1, r4
 80027cc:	024a      	lsls	r2, r1, #9
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027e4:	f7fd fd14 	bl	8000210 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027f2:	e067      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b75      	ldr	r3, [pc, #468]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002800:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800280e:	2300      	movs	r3, #0
 8002810:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002812:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002816:	4622      	mov	r2, r4
 8002818:	462b      	mov	r3, r5
 800281a:	f04f 0000 	mov.w	r0, #0
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	0159      	lsls	r1, r3, #5
 8002824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002828:	0150      	lsls	r0, r2, #5
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4621      	mov	r1, r4
 8002830:	1a51      	subs	r1, r2, r1
 8002832:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002834:	4629      	mov	r1, r5
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002848:	4649      	mov	r1, r9
 800284a:	018b      	lsls	r3, r1, #6
 800284c:	4641      	mov	r1, r8
 800284e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002852:	4641      	mov	r1, r8
 8002854:	018a      	lsls	r2, r1, #6
 8002856:	4641      	mov	r1, r8
 8002858:	ebb2 0a01 	subs.w	sl, r2, r1
 800285c:	4649      	mov	r1, r9
 800285e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800286e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002872:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002876:	4692      	mov	sl, r2
 8002878:	469b      	mov	fp, r3
 800287a:	4623      	mov	r3, r4
 800287c:	eb1a 0303 	adds.w	r3, sl, r3
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	462b      	mov	r3, r5
 8002884:	eb4b 0303 	adc.w	r3, fp, r3
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ac:	2200      	movs	r2, #0
 80028ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80028b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80028b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028b6:	f7fd fcab 	bl	8000210 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4613      	mov	r3, r2
 80028c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028c4:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80028d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028e6:	e0eb      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e8:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d06b      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002900:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	2200      	movs	r2, #0
 8002908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800290a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800290c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800290e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002912:	663b      	str	r3, [r7, #96]	@ 0x60
 8002914:	2300      	movs	r3, #0
 8002916:	667b      	str	r3, [r7, #100]	@ 0x64
 8002918:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800291c:	4622      	mov	r2, r4
 800291e:	462b      	mov	r3, r5
 8002920:	f04f 0000 	mov.w	r0, #0
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	0159      	lsls	r1, r3, #5
 800292a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292e:	0150      	lsls	r0, r2, #5
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4621      	mov	r1, r4
 8002936:	1a51      	subs	r1, r2, r1
 8002938:	61b9      	str	r1, [r7, #24]
 800293a:	4629      	mov	r1, r5
 800293c:	eb63 0301 	sbc.w	r3, r3, r1
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800294e:	4659      	mov	r1, fp
 8002950:	018b      	lsls	r3, r1, #6
 8002952:	4651      	mov	r1, sl
 8002954:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002958:	4651      	mov	r1, sl
 800295a:	018a      	lsls	r2, r1, #6
 800295c:	4651      	mov	r1, sl
 800295e:	ebb2 0801 	subs.w	r8, r2, r1
 8002962:	4659      	mov	r1, fp
 8002964:	eb63 0901 	sbc.w	r9, r3, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002974:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002978:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297c:	4690      	mov	r8, r2
 800297e:	4699      	mov	r9, r3
 8002980:	4623      	mov	r3, r4
 8002982:	eb18 0303 	adds.w	r3, r8, r3
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	462b      	mov	r3, r5
 800298a:	eb49 0303 	adc.w	r3, r9, r3
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800299c:	4629      	mov	r1, r5
 800299e:	024b      	lsls	r3, r1, #9
 80029a0:	4621      	mov	r1, r4
 80029a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a6:	4621      	mov	r1, r4
 80029a8:	024a      	lsls	r2, r1, #9
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029b2:	2200      	movs	r2, #0
 80029b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029bc:	f7fd fc28 	bl	8000210 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ca:	e065      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x420>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	00f42400 	.word	0x00f42400
 80029d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	2200      	movs	r2, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	4611      	mov	r1, r2
 80029e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80029ea:	2300      	movs	r3, #0
 80029ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a04:	0150      	lsls	r0, r2, #5
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	1a51      	subs	r1, r2, r1
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	4649      	mov	r1, r9
 8002a12:	eb63 0301 	sbc.w	r3, r3, r1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a24:	4659      	mov	r1, fp
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2e:	4651      	mov	r1, sl
 8002a30:	018a      	lsls	r2, r1, #6
 8002a32:	4651      	mov	r1, sl
 8002a34:	1a54      	subs	r4, r2, r1
 8002a36:	4659      	mov	r1, fp
 8002a38:	eb63 0501 	sbc.w	r5, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	18e3      	adds	r3, r4, r3
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	464b      	mov	r3, r9
 8002a58:	eb45 0303 	adc.w	r3, r5, r3
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	028b      	lsls	r3, r1, #10
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a74:	4621      	mov	r1, r4
 8002a76:	028a      	lsls	r2, r1, #10
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a80:	2200      	movs	r2, #0
 8002a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a8a:	f7fd fbc1 	bl	8000210 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4613      	mov	r3, r2
 8002a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0f1b      	lsrs	r3, r3, #28
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002aa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ab6:	e003      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	37b8      	adds	r7, #184	@ 0xb8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	00f42400 	.word	0x00f42400

08002ad8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e28d      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8083 	beq.w	8002bfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002af8:	4b94      	ldr	r3, [pc, #592]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d019      	beq.n	8002b38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b04:	4b91      	ldr	r3, [pc, #580]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b10:	4b8e      	ldr	r3, [pc, #568]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b1c:	d00c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d112      	bne.n	8002b50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4b88      	ldr	r3, [pc, #544]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	4b84      	ldr	r3, [pc, #528]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05b      	beq.n	8002bfc <HAL_RCC_OscConfig+0x124>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d157      	bne.n	8002bfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e25a      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x90>
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xcc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xb4>
 8002b72:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a75      	ldr	r2, [pc, #468]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b73      	ldr	r3, [pc, #460]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a72      	ldr	r2, [pc, #456]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xcc>
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b6c      	ldr	r3, [pc, #432]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fc50 	bl	8001450 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fc4c 	bl	8001450 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e21f      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xdc>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fc3c 	bl	8001450 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fc38 	bl	8001450 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e20b      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b57      	ldr	r3, [pc, #348]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x104>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06f      	beq.n	8002cea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c0a:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d017      	beq.n	8002c46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c16:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d105      	bne.n	8002c2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x186>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1d3      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4937      	ldr	r1, [pc, #220]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCC_OscConfig+0x278>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fbe5 	bl	8001450 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fbe1 	bl	8001450 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1b4      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_RCC_OscConfig+0x278>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fbc4 	bl	8001450 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fbc0 	bl	8001450 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e193      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d036      	beq.n	8002d64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fba4 	bl	8001450 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fba0 	bl	8001450 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e173      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_OscConfig+0x274>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x234>
 8002d2a:	e01b      	b.n	8002d64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fe fb8d 	bl	8001450 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e00e      	b.n	8002d58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fb89 	bl	8001450 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d907      	bls.n	8002d58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e15c      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470000 	.word	0x42470000
 8002d54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	4b8a      	ldr	r3, [pc, #552]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ea      	bne.n	8002d3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8097 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b83      	ldr	r3, [pc, #524]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b7f      	ldr	r3, [pc, #508]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b7c      	ldr	r3, [pc, #496]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b79      	ldr	r3, [pc, #484]	@ (8002f88 <HAL_RCC_OscConfig+0x4b0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b76      	ldr	r3, [pc, #472]	@ (8002f88 <HAL_RCC_OscConfig+0x4b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a75      	ldr	r2, [pc, #468]	@ (8002f88 <HAL_RCC_OscConfig+0x4b0>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fb49 	bl	8001450 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fb45 	bl	8001450 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e118      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f88 <HAL_RCC_OscConfig+0x4b0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x31e>
 8002de8:	4b66      	ldr	r3, [pc, #408]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a65      	ldr	r2, [pc, #404]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x358>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x340>
 8002dfe:	4b61      	ldr	r3, [pc, #388]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	4a60      	ldr	r2, [pc, #384]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x358>
 8002e18:	4b5a      	ldr	r3, [pc, #360]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1c:	4a59      	ldr	r2, [pc, #356]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e24:	4b57      	ldr	r3, [pc, #348]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a56      	ldr	r2, [pc, #344]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	f023 0304 	bic.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fb0a 	bl	8001450 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fb06 	bl	8001450 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0d7      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	4b4b      	ldr	r3, [pc, #300]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RCC_OscConfig+0x368>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe faf4 	bl	8001450 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe faf0 	bl	8001450 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0c1      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	4b40      	ldr	r3, [pc, #256]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	4a3a      	ldr	r2, [pc, #232]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80ad 	beq.w	8003004 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eaa:	4b36      	ldr	r3, [pc, #216]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d060      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d145      	bne.n	8002f4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b33      	ldr	r3, [pc, #204]	@ (8002f8c <HAL_RCC_OscConfig+0x4b4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fac4 	bl	8001450 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fac0 	bl	8001450 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e093      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b29      	ldr	r3, [pc, #164]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	3b01      	subs	r3, #1
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	071b      	lsls	r3, r3, #28
 8002f16:	491b      	ldr	r1, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <HAL_RCC_OscConfig+0x4b4>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fa95 	bl	8001450 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fa91 	bl	8001450 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e064      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x452>
 8002f48:	e05c      	b.n	8003004 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_RCC_OscConfig+0x4b4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fa7e 	bl	8001450 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fa7a 	bl	8001450 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04d      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x480>
 8002f76:	e045      	b.n	8003004 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e040      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000
 8002f8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <HAL_RCC_OscConfig+0x538>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d030      	beq.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d129      	bne.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d122      	bne.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d119      	bne.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d10f      	bne.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e041      	b.n	80030aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f839 	bl	80030b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f9c0 	bl	80033d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e04e      	b.n	800317e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	@ (800318c <HAL_TIM_Base_Start_IT+0xc4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310a:	d01d      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <HAL_TIM_Base_Start_IT+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <HAL_TIM_Base_Start_IT+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_TIM_Base_Start_IT+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <HAL_TIM_Base_Start_IT+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d111      	bne.n	800316c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d010      	beq.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	e007      	b.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0202 	mvn.w	r2, #2
 80031dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8d2 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8c4 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8d5 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0204 	mvn.w	r2, #4
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8ac 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f89e 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8af 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d020      	beq.n	80032a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0208 	mvn.w	r2, #8
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2204      	movs	r2, #4
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f886 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f878 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f889 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d020      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f860 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f852 	bl	8003388 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f863 	bl	80033b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00c      	beq.n	8003314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0201 	mvn.w	r2, #1
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fcae 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f900 	bl	8003538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f834 	bl	80033c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0220 	mvn.w	r2, #32
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8d2 	bl	8003524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a43      	ldr	r2, [pc, #268]	@ (80034f8 <TIM_Base_SetConfig+0x120>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f6:	d00f      	beq.n	8003418 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a40      	ldr	r2, [pc, #256]	@ (80034fc <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00b      	beq.n	8003418 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3f      	ldr	r2, [pc, #252]	@ (8003500 <TIM_Base_SetConfig+0x128>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a3e      	ldr	r2, [pc, #248]	@ (8003504 <TIM_Base_SetConfig+0x12c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a3d      	ldr	r2, [pc, #244]	@ (8003508 <TIM_Base_SetConfig+0x130>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d108      	bne.n	800342a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a32      	ldr	r2, [pc, #200]	@ (80034f8 <TIM_Base_SetConfig+0x120>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d02b      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d027      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a2f      	ldr	r2, [pc, #188]	@ (80034fc <TIM_Base_SetConfig+0x124>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d023      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2e      	ldr	r2, [pc, #184]	@ (8003500 <TIM_Base_SetConfig+0x128>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01f      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <TIM_Base_SetConfig+0x12c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01b      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <TIM_Base_SetConfig+0x130>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d017      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2b      	ldr	r2, [pc, #172]	@ (800350c <TIM_Base_SetConfig+0x134>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2a      	ldr	r2, [pc, #168]	@ (8003510 <TIM_Base_SetConfig+0x138>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00f      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a29      	ldr	r2, [pc, #164]	@ (8003514 <TIM_Base_SetConfig+0x13c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a28      	ldr	r2, [pc, #160]	@ (8003518 <TIM_Base_SetConfig+0x140>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a27      	ldr	r2, [pc, #156]	@ (800351c <TIM_Base_SetConfig+0x144>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a26      	ldr	r2, [pc, #152]	@ (8003520 <TIM_Base_SetConfig+0x148>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d108      	bne.n	800349c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0e      	ldr	r2, [pc, #56]	@ (80034f8 <TIM_Base_SetConfig+0x120>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0xf2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a10      	ldr	r2, [pc, #64]	@ (8003508 <TIM_Base_SetConfig+0x130>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d103      	bne.n	80034d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40010400 	.word	0x40010400
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800
 8003518:	40001800 	.word	0x40001800
 800351c:	40001c00 	.word	0x40001c00
 8003520:	40002000 	.word	0x40002000

08003524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e042      	b.n	80035e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fc08 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	@ 0x24
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800358e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa09 	bl	80039a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	d175      	bne.n	80036f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_UART_Transmit+0x2c>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e06e      	b.n	80036fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2221      	movs	r2, #33	@ 0x21
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362a:	f7fd ff11 	bl	8001450 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d108      	bne.n	8003658 <HAL_UART_Transmit+0x6c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e003      	b.n	8003660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003660:	e02e      	b.n	80036c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	2180      	movs	r1, #128	@ 0x80
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f8df 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e03a      	b.n	80036fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3302      	adds	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e007      	b.n	80036b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1cb      	bne.n	8003662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2140      	movs	r1, #64	@ 0x40
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f8ab 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e006      	b.n	80036fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b08a      	sub	sp, #40	@ 0x28
 8003706:	af02      	add	r7, sp, #8
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b20      	cmp	r3, #32
 8003720:	f040 8081 	bne.w	8003826 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Receive+0x2e>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e079      	b.n	8003828 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2222      	movs	r2, #34	@ 0x22
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003748:	f7fd fe82 	bl	8001450 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003762:	d108      	bne.n	8003776 <HAL_UART_Receive+0x74>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e003      	b.n	800377e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800377e:	e047      	b.n	8003810 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2200      	movs	r2, #0
 8003788:	2120      	movs	r1, #32
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f850 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e042      	b.n	8003828 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10c      	bne.n	80037c2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3302      	adds	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e01f      	b.n	8003802 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ca:	d007      	beq.n	80037dc <HAL_UART_Receive+0xda>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_UART_Receive+0xe8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e008      	b.n	80037fc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1b2      	bne.n	8003780 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003840:	e03b      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d037      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fd fe01 	bl	8001450 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <UART_WaitOnFlagUntilTimeout+0x30>
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e03a      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d023      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d020      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d01d      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d116      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f81d 	bl	80038e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2208      	movs	r2, #8
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d0b4      	beq.n	8003842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b095      	sub	sp, #84	@ 0x54
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800390a:	643a      	str	r2, [r7, #64]	@ 0x40
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003910:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e5      	bne.n	80038ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	61fb      	str	r3, [r7, #28]
   return(result);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800393e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003940:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b01      	cmp	r3, #1
 8003958:	d119      	bne.n	800398e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	60bb      	str	r3, [r7, #8]
   return(result);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f023 0310 	bic.w	r3, r3, #16
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800397a:	61ba      	str	r2, [r7, #24]
 800397c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	613b      	str	r3, [r7, #16]
   return(result);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e5      	bne.n	800395a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800399c:	bf00      	nop
 800399e:	3754      	adds	r7, #84	@ 0x54
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0c0      	sub	sp, #256	@ 0x100
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	ea40 0301 	orr.w	r3, r0, r1
 80039d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a00:	f021 010c 	bic.w	r1, r1, #12
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	6999      	ldr	r1, [r3, #24]
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	ea40 0301 	orr.w	r3, r0, r1
 8003a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b8f      	ldr	r3, [pc, #572]	@ (8003c74 <UART_SetConfig+0x2cc>)
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0xa0>
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b8d      	ldr	r3, [pc, #564]	@ (8003c78 <UART_SetConfig+0x2d0>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d104      	bne.n	8003a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7fe fdd0 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8003a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a50:	e003      	b.n	8003a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7fe fdb7 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003a56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a64:	f040 810c 	bne.w	8003c80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a82:	415b      	adcs	r3, r3
 8003a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	eb12 0801 	adds.w	r8, r2, r1
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb43 0901 	adc.w	r9, r3, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	eb18 0303 	adds.w	r3, r8, r3
 8003ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	462b      	mov	r3, r5
 8003aba:	eb49 0303 	adc.w	r3, r9, r3
 8003abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ace:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	18db      	adds	r3, r3, r3
 8003ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8003adc:	4613      	mov	r3, r2
 8003ade:	eb42 0303 	adc.w	r3, r2, r3
 8003ae2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003aec:	f7fc fb90 	bl	8000210 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b61      	ldr	r3, [pc, #388]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b20:	4641      	mov	r1, r8
 8003b22:	eb12 0a01 	adds.w	sl, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb43 0b01 	adc.w	fp, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b40:	4692      	mov	sl, r2
 8003b42:	469b      	mov	fp, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	eb1a 0303 	adds.w	r3, sl, r3
 8003b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	eb4b 0303 	adc.w	r3, fp, r3
 8003b54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b82:	f7fc fb45 	bl	8000210 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	@ 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ba2:	4b36      	ldr	r3, [pc, #216]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c08:	464b      	mov	r3, r9
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c28:	460b      	mov	r3, r1
 8003c2a:	18db      	adds	r3, r3, r3
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2e:	4613      	mov	r3, r2
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c3e:	f7fc fae7 	bl	8000210 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	@ 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	@ 0x32
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4422      	add	r2, r4
 8003c6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c70:	e106      	b.n	8003e80 <UART_SetConfig+0x4d8>
 8003c72:	bf00      	nop
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c92:	4642      	mov	r2, r8
 8003c94:	464b      	mov	r3, r9
 8003c96:	1891      	adds	r1, r2, r2
 8003c98:	6239      	str	r1, [r7, #32]
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	eb43 0501 	adc.w	r5, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cc8:	464b      	mov	r3, r9
 8003cca:	eb45 0303 	adc.w	r3, r5, r3
 8003cce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cee:	4629      	mov	r1, r5
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	008a      	lsls	r2, r1, #2
 8003cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d00:	f7fc fa86 	bl	8000210 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b60      	ldr	r3, [pc, #384]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	011c      	lsls	r4, r3, #4
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	61b9      	str	r1, [r7, #24]
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6139      	str	r1, [r7, #16]
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	008b      	lsls	r3, r1, #2
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d96:	4641      	mov	r1, r8
 8003d98:	008a      	lsls	r2, r1, #2
 8003d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d9e:	f7fc fa37 	bl	8000210 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	4b38      	ldr	r3, [pc, #224]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003daa:	fba3 2301 	umull	r2, r3, r3, r1
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2264      	movs	r2, #100	@ 0x64
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	1acb      	subs	r3, r1, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	@ 0x32
 8003dbc:	4a33      	ldr	r2, [pc, #204]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc8:	441c      	add	r4, r3
 8003dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dce:	2200      	movs	r2, #0
 8003dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dd8:	4642      	mov	r2, r8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	415b      	adcs	r3, r3
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de8:	4641      	mov	r1, r8
 8003dea:	1851      	adds	r1, r2, r1
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	4649      	mov	r1, r9
 8003df0:	414b      	adcs	r3, r1
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e00:	4659      	mov	r1, fp
 8003e02:	00cb      	lsls	r3, r1, #3
 8003e04:	4651      	mov	r1, sl
 8003e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	00ca      	lsls	r2, r1, #3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	4642      	mov	r2, r8
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e46:	4641      	mov	r1, r8
 8003e48:	008a      	lsls	r2, r1, #2
 8003e4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e4e:	f7fc f9df 	bl	8000210 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	@ 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	3332      	adds	r3, #50	@ 0x32
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4422      	add	r2, r4
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e86:	46bd      	mov	sp, r7
 8003e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <__NVIC_SetPriority>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	db0a      	blt.n	8003eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	490c      	ldr	r1, [pc, #48]	@ (8003edc <__NVIC_SetPriority+0x4c>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	0112      	lsls	r2, r2, #4
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003eb8:	e00a      	b.n	8003ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4908      	ldr	r1, [pc, #32]	@ (8003ee0 <__NVIC_SetPriority+0x50>)
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	3b04      	subs	r3, #4
 8003ec8:	0112      	lsls	r2, r2, #4
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	440b      	add	r3, r1
 8003ece:	761a      	strb	r2, [r3, #24]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000e100 	.word	0xe000e100
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <SysTick_Handler+0x1c>)
 8003eea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003eec:	f001 ff34 	bl	8005d58 <xTaskGetSchedulerState>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ef6:	f002 fe4f 	bl	8006b98 <xPortSysTickHandler>
  }
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010

08003f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	f06f 0004 	mvn.w	r0, #4
 8003f0e:	f7ff ffbf 	bl	8003e90 <__NVIC_SetPriority>
#endif
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1e:	f3ef 8305 	mrs	r3, IPSR
 8003f22:	603b      	str	r3, [r7, #0]
  return(result);
 8003f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f2a:	f06f 0305 	mvn.w	r3, #5
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e00c      	b.n	8003f4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f32:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <osKernelInitialize+0x44>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <osKernelInitialize+0x44>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	e002      	b.n	8003f4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f4c:	687b      	ldr	r3, [r7, #4]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2000019c 	.word	0x2000019c

08003f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f66:	f3ef 8305 	mrs	r3, IPSR
 8003f6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f72:	f06f 0305 	mvn.w	r3, #5
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	e010      	b.n	8003f9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <osKernelStart+0x48>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d109      	bne.n	8003f96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f82:	f7ff ffbf 	bl	8003f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <osKernelStart+0x48>)
 8003f88:	2202      	movs	r2, #2
 8003f8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f8c:	f001 fa80 	bl	8005490 <vTaskStartScheduler>
      stat = osOK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	e002      	b.n	8003f9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f9c:	687b      	ldr	r3, [r7, #4]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000019c 	.word	0x2000019c

08003fac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08e      	sub	sp, #56	@ 0x38
 8003fb0:	af04      	add	r7, sp, #16
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fbc:	f3ef 8305 	mrs	r3, IPSR
 8003fc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003fc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d17e      	bne.n	80040c6 <osThreadNew+0x11a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d07b      	beq.n	80040c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fce:	2380      	movs	r3, #128	@ 0x80
 8003fd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fd2:	2318      	movs	r3, #24
 8003fd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d045      	beq.n	8004072 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <osThreadNew+0x48>
        name = attr->name;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <osThreadNew+0x6e>
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b38      	cmp	r3, #56	@ 0x38
 800400c:	d805      	bhi.n	800401a <osThreadNew+0x6e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <osThreadNew+0x72>
        return (NULL);
 800401a:	2300      	movs	r3, #0
 800401c:	e054      	b.n	80040c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <osThreadNew+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2ba7      	cmp	r3, #167	@ 0xa7
 800403c:	d90a      	bls.n	8004054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <osThreadNew+0xa8>
        mem = 1;
 800404e:	2301      	movs	r3, #1
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e010      	b.n	8004076 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10c      	bne.n	8004076 <osThreadNew+0xca>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <osThreadNew+0xca>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <osThreadNew+0xca>
          mem = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e001      	b.n	8004076 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d110      	bne.n	800409e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004084:	9202      	str	r2, [sp, #8]
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a3a      	ldr	r2, [r7, #32]
 8004090:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f001 f808 	bl	80050a8 <xTaskCreateStatic>
 8004098:	4603      	mov	r3, r0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e013      	b.n	80040c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d110      	bne.n	80040c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	f107 0310 	add.w	r3, r7, #16
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f001 f856 	bl	8005168 <xTaskCreate>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <osThreadNew+0x11a>
            hTask = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040c6:	693b      	ldr	r3, [r7, #16]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d8:	f3ef 8305 	mrs	r3, IPSR
 80040dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80040de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <osDelay+0x1c>
    stat = osErrorISR;
 80040e4:	f06f 0305 	mvn.w	r3, #5
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	e007      	b.n	80040fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f001 f994 	bl	8005424 <vTaskDelay>
    }
  }

  return (stat);
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004106:	b580      	push	{r7, lr}
 8004108:	b08a      	sub	sp, #40	@ 0x28
 800410a:	af02      	add	r7, sp, #8
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004116:	f3ef 8305 	mrs	r3, IPSR
 800411a:	613b      	str	r3, [r7, #16]
  return(result);
 800411c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800411e:	2b00      	cmp	r3, #0
 8004120:	d15f      	bne.n	80041e2 <osMessageQueueNew+0xdc>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <osMessageQueueNew+0xdc>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d059      	beq.n	80041e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d029      	beq.n	800418e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <osMessageQueueNew+0x62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b4f      	cmp	r3, #79	@ 0x4f
 8004148:	d90e      	bls.n	8004168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <osMessageQueueNew+0x62>
        mem = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e014      	b.n	8004192 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d110      	bne.n	8004192 <osMessageQueueNew+0x8c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10c      	bne.n	8004192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <osMessageQueueNew+0x8c>
          mem = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e001      	b.n	8004192 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10b      	bne.n	80041b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2100      	movs	r1, #0
 80041a2:	9100      	str	r1, [sp, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa30 	bl	800460c <xQueueGenericCreateStatic>
 80041ac:	61f8      	str	r0, [r7, #28]
 80041ae:	e008      	b.n	80041c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80041b6:	2200      	movs	r2, #0
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 faa3 	bl	8004706 <xQueueGenericCreate>
 80041c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e001      	b.n	80041da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	69f8      	ldr	r0, [r7, #28]
 80041de:	f000 ff05 	bl	8004fec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80041e2:	69fb      	ldr	r3, [r7, #28]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004204:	f3ef 8305 	mrs	r3, IPSR
 8004208:	617b      	str	r3, [r7, #20]
  return(result);
 800420a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800420c:	2b00      	cmp	r3, #0
 800420e:	d028      	beq.n	8004262 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <osMessageQueuePut+0x36>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <osMessageQueuePut+0x36>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004222:	f06f 0303 	mvn.w	r3, #3
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	e038      	b.n	800429c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800422e:	f107 0210 	add.w	r2, r7, #16
 8004232:	2300      	movs	r3, #0
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	69b8      	ldr	r0, [r7, #24]
 8004238:	f000 fbc6 	bl	80049c8 <xQueueGenericSendFromISR>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d003      	beq.n	800424a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004242:	f06f 0302 	mvn.w	r3, #2
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e028      	b.n	800429c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d025      	beq.n	800429c <osMessageQueuePut+0xb0>
 8004250:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <osMessageQueuePut+0xbc>)
 8004252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	e01c      	b.n	800429c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <osMessageQueuePut+0x82>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d103      	bne.n	8004276 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800426e:	f06f 0303 	mvn.w	r3, #3
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e012      	b.n	800429c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004276:	2300      	movs	r3, #0
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	69b8      	ldr	r0, [r7, #24]
 800427e:	f000 faa1 	bl	80047c4 <xQueueGenericSend>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d009      	beq.n	800429c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800428e:	f06f 0301 	mvn.w	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	e002      	b.n	800429c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004296:	f06f 0302 	mvn.w	r3, #2
 800429a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800429c:	69fb      	ldr	r3, [r7, #28]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c2:	f3ef 8305 	mrs	r3, IPSR
 80042c6:	617b      	str	r3, [r7, #20]
  return(result);
 80042c8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d028      	beq.n	8004320 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <osMessageQueueGet+0x34>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <osMessageQueueGet+0x34>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80042e0:	f06f 0303 	mvn.w	r3, #3
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e037      	b.n	8004358 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	461a      	mov	r2, r3
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	69b8      	ldr	r0, [r7, #24]
 80042f6:	f000 fce7 	bl	8004cc8 <xQueueReceiveFromISR>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d003      	beq.n	8004308 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004300:	f06f 0302 	mvn.w	r3, #2
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e027      	b.n	8004358 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <osMessageQueueGet+0xac>
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <osMessageQueueGet+0xb8>)
 8004310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	e01b      	b.n	8004358 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <osMessageQueueGet+0x80>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800432c:	f06f 0303 	mvn.w	r3, #3
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e011      	b.n	8004358 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	69b8      	ldr	r0, [r7, #24]
 800433a:	f000 fbe3 	bl	8004b04 <xQueueReceive>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d009      	beq.n	8004358 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800434a:	f06f 0301 	mvn.w	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	e002      	b.n	8004358 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004352:	f06f 0302 	mvn.w	r3, #2
 8004356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004358:	69fb      	ldr	r3, [r7, #28]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a07      	ldr	r2, [pc, #28]	@ (8004394 <vApplicationGetIdleTaskMemory+0x2c>)
 8004378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a06      	ldr	r2, [pc, #24]	@ (8004398 <vApplicationGetIdleTaskMemory+0x30>)
 800437e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200001a0 	.word	0x200001a0
 8004398:	20000248 	.word	0x20000248

0800439c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80043ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a06      	ldr	r2, [pc, #24]	@ (80043cc <vApplicationGetTimerTaskMemory+0x30>)
 80043b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000448 	.word	0x20000448
 80043cc:	200004f0 	.word	0x200004f0

080043d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f103 0208 	add.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0208 	add.w	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f103 0208 	add.w	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	601a      	str	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d103      	bne.n	8004492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e00c      	b.n	80044ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3308      	adds	r3, #8
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e002      	b.n	80044a0 <vListInsert+0x2e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d2f6      	bcs.n	800449a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d103      	bne.n	8004518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1e5a      	subs	r2, r3, #1
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004564:	f002 fa88 	bl	8006a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004594:	3b01      	subs	r3, #1
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	441a      	add	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	22ff      	movs	r2, #255	@ 0xff
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	22ff      	movs	r2, #255	@ 0xff
 80045b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d114      	bne.n	80045e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01a      	beq.n	80045f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3310      	adds	r3, #16
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fa00 	bl	80059cc <xTaskRemoveFromEventList>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <xQueueGenericReset+0xd0>)
 80045d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	e009      	b.n	80045f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3310      	adds	r3, #16
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fef1 	bl	80043d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3324      	adds	r3, #36	@ 0x24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff feec 	bl	80043d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045f8:	f002 fa70 	bl	8006adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045fc:	2301      	movs	r3, #1
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	@ 0x38
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <xQueueGenericCreateStatic+0x56>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <xQueueGenericCreateStatic+0x5a>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericCreateStatic+0x5c>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	623b      	str	r3, [r7, #32]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <xQueueGenericCreateStatic+0x84>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <xQueueGenericCreateStatic+0x88>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <xQueueGenericCreateStatic+0x8a>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61fb      	str	r3, [r7, #28]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046b2:	2350      	movs	r3, #80	@ 0x50
 80046b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b50      	cmp	r3, #80	@ 0x50
 80046ba:	d00b      	beq.n	80046d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61bb      	str	r3, [r7, #24]
}
 80046ce:	bf00      	nop
 80046d0:	bf00      	nop
 80046d2:	e7fd      	b.n	80046d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00d      	beq.n	80046fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f840 	bl	800477c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	3730      	adds	r7, #48	@ 0x30
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004706:	b580      	push	{r7, lr}
 8004708:	b08a      	sub	sp, #40	@ 0x28
 800470a:	af02      	add	r7, sp, #8
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4613      	mov	r3, r2
 8004712:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <xQueueGenericCreate+0x2c>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	613b      	str	r3, [r7, #16]
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3350      	adds	r3, #80	@ 0x50
 8004740:	4618      	mov	r0, r3
 8004742:	f002 fabb 	bl	8006cbc <pvPortMalloc>
 8004746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3350      	adds	r3, #80	@ 0x50
 8004756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004760:	79fa      	ldrb	r2, [r7, #7]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f805 	bl	800477c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004772:	69bb      	ldr	r3, [r7, #24]
	}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e002      	b.n	800479e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047aa:	2101      	movs	r1, #1
 80047ac:	69b8      	ldr	r0, [r7, #24]
 80047ae:	f7ff fec3 	bl	8004538 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	@ 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueGenericSend+0x34>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <xQueueGenericSend+0x42>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <xQueueGenericSend+0x46>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <xQueueGenericSend+0x48>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericSend+0x64>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x72>
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <xQueueGenericSend+0x76>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSend+0x78>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericSend+0x94>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	623b      	str	r3, [r7, #32]
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004858:	f001 fa7e 	bl	8005d58 <xTaskGetSchedulerState>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <xQueueGenericSend+0xa4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <xQueueGenericSend+0xa8>
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <xQueueGenericSend+0xaa>
 800486c:	2300      	movs	r3, #0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10b      	bne.n	800488a <xQueueGenericSend+0xc6>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	61fb      	str	r3, [r7, #28]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800488a:	f002 f8f5 	bl	8006a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	429a      	cmp	r2, r3
 8004898:	d302      	bcc.n	80048a0 <xQueueGenericSend+0xdc>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d129      	bne.n	80048f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a6:	f000 fa91 	bl	8004dcc <prvCopyDataToQueue>
 80048aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d010      	beq.n	80048d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	3324      	adds	r3, #36	@ 0x24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 f887 	bl	80059cc <xTaskRemoveFromEventList>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048c4:	4b3f      	ldr	r3, [pc, #252]	@ (80049c4 <xQueueGenericSend+0x200>)
 80048c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	e00a      	b.n	80048ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048dc:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <xQueueGenericSend+0x200>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048ec:	f002 f8f6 	bl	8006adc <vPortExitCritical>
				return pdPASS;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e063      	b.n	80049bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048fa:	f002 f8ef 	bl	8006adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	e05c      	b.n	80049bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4618      	mov	r0, r3
 800490e:	f001 f8c1 	bl	8005a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004916:	f002 f8e1 	bl	8006adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800491a:	f000 fe29 	bl	8005570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491e:	f002 f8ab 	bl	8006a78 <vPortEnterCritical>
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004928:	b25b      	sxtb	r3, r3
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d103      	bne.n	8004938 <xQueueGenericSend+0x174>
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800493e:	b25b      	sxtb	r3, r3
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d103      	bne.n	800494e <xQueueGenericSend+0x18a>
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494e:	f002 f8c5 	bl	8006adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004952:	1d3a      	adds	r2, r7, #4
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f001 f8b0 	bl	8005ac0 <xTaskCheckForTimeOut>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d124      	bne.n	80049b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004966:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004968:	f000 fb28 	bl	8004fbc <prvIsQueueFull>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	3310      	adds	r3, #16
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 ffd4 	bl	8005928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004982:	f000 fab3 	bl	8004eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004986:	f000 fe01 	bl	800558c <xTaskResumeAll>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	f47f af7c 	bne.w	800488a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004992:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <xQueueGenericSend+0x200>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	e772      	b.n	800488a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a6:	f000 faa1 	bl	8004eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049aa:	f000 fdef 	bl	800558c <xTaskResumeAll>
 80049ae:	e76c      	b.n	800488a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049b2:	f000 fa9b 	bl	8004eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b6:	f000 fde9 	bl	800558c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3738      	adds	r7, #56	@ 0x38
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b090      	sub	sp, #64	@ 0x40
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <xQueueGenericSendFromISR+0x3e>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xQueueGenericSendFromISR+0x42>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueGenericSendFromISR+0x44>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSendFromISR+0x6e>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSendFromISR+0x72>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSendFromISR+0x74>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a58:	f002 f8ee 	bl	8006c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a5c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61fa      	str	r2, [r7, #28]
 8004a72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <xQueueGenericSendFromISR+0xc2>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d12f      	bne.n	8004aea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004aa0:	f000 f994 	bl	8004dcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d112      	bne.n	8004ad4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab8:	3324      	adds	r3, #36	@ 0x24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff86 	bl	80059cc <xTaskRemoveFromEventList>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00e      	beq.n	8004ae4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e007      	b.n	8004ae4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004ad8:	3301      	adds	r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	b25a      	sxtb	r2, r3
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ae8:	e001      	b.n	8004aee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004af8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3740      	adds	r7, #64	@ 0x40
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	@ 0x30
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xQueueReceive+0x32>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	623b      	str	r3, [r7, #32]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d103      	bne.n	8004b44 <xQueueReceive+0x40>
 8004b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <xQueueReceive+0x44>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <xQueueReceive+0x46>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <xQueueReceive+0x62>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	61fb      	str	r3, [r7, #28]
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b66:	f001 f8f7 	bl	8005d58 <xTaskGetSchedulerState>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <xQueueReceive+0x72>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <xQueueReceive+0x76>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueReceive+0x78>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <xQueueReceive+0x94>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61bb      	str	r3, [r7, #24]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b98:	f001 ff6e 	bl	8006a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01f      	beq.n	8004be8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bac:	f000 f978 	bl	8004ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	1e5a      	subs	r2, r3, #1
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00f      	beq.n	8004be0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	3310      	adds	r3, #16
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 ff01 	bl	80059cc <xTaskRemoveFromEventList>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc4 <xQueueReceive+0x1c0>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004be0:	f001 ff7c 	bl	8006adc <vPortExitCritical>
				return pdPASS;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e069      	b.n	8004cbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bee:	f001 ff75 	bl	8006adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e062      	b.n	8004cbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bfc:	f107 0310 	add.w	r3, r7, #16
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff47 	bl	8005a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c06:	2301      	movs	r3, #1
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c0a:	f001 ff67 	bl	8006adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c0e:	f000 fcaf 	bl	8005570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c12:	f001 ff31 	bl	8006a78 <vPortEnterCritical>
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d103      	bne.n	8004c2c <xQueueReceive+0x128>
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c32:	b25b      	sxtb	r3, r3
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d103      	bne.n	8004c42 <xQueueReceive+0x13e>
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c42:	f001 ff4b 	bl	8006adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c46:	1d3a      	adds	r2, r7, #4
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 ff36 	bl	8005ac0 <xTaskCheckForTimeOut>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d123      	bne.n	8004ca2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c5c:	f000 f998 	bl	8004f90 <prvIsQueueEmpty>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	3324      	adds	r3, #36	@ 0x24
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fe5a 	bl	8005928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c76:	f000 f939 	bl	8004eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c7a:	f000 fc87 	bl	800558c <xTaskResumeAll>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d189      	bne.n	8004b98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c84:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <xQueueReceive+0x1c0>)
 8004c86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	e780      	b.n	8004b98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c98:	f000 f928 	bl	8004eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c9c:	f000 fc76 	bl	800558c <xTaskResumeAll>
 8004ca0:	e77a      	b.n	8004b98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca4:	f000 f922 	bl	8004eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ca8:	f000 fc70 	bl	800558c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cae:	f000 f96f 	bl	8004f90 <prvIsQueueEmpty>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f43f af6f 	beq.w	8004b98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3730      	adds	r7, #48	@ 0x30
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	@ 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	623b      	str	r3, [r7, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <xQueueReceiveFromISR+0x3c>
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <xQueueReceiveFromISR+0x40>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <xQueueReceiveFromISR+0x42>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61fb      	str	r3, [r7, #28]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d26:	f001 ff87 	bl	8006c38 <vPortValidateInterruptPriority>
	__asm volatile
 8004d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	61ba      	str	r2, [r7, #24]
 8004d40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02f      	beq.n	8004db2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d60:	f000 f89e 	bl	8004ea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d112      	bne.n	8004d9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	3310      	adds	r3, #16
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fe22 	bl	80059cc <xTaskRemoveFromEventList>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e007      	b.n	8004dac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004da0:	3301      	adds	r3, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	b25a      	sxtb	r2, r3
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004dac:	2301      	movs	r3, #1
 8004dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db0:	e001      	b.n	8004db6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f383 8811 	msr	BASEPRI, r3
}
 8004dc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3738      	adds	r7, #56	@ 0x38
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10d      	bne.n	8004e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d14d      	bne.n	8004e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 ffcc 	bl	8005d94 <xTaskPriorityDisinherit>
 8004dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	e043      	b.n	8004e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d119      	bne.n	8004e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6858      	ldr	r0, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	461a      	mov	r2, r3
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	f002 f9ca 	bl	80071b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e24:	441a      	add	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d32b      	bcc.n	8004e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	e026      	b.n	8004e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68d8      	ldr	r0, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	f002 f9b0 	bl	80071b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	425b      	negs	r3, r3
 8004e5a:	441a      	add	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d207      	bcs.n	8004e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	425b      	negs	r3, r3
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d105      	bne.n	8004e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e96:	697b      	ldr	r3, [r7, #20]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	441a      	add	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d303      	bcc.n	8004ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68d9      	ldr	r1, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	461a      	mov	r2, r3
 8004ede:	6838      	ldr	r0, [r7, #0]
 8004ee0:	f002 f966 	bl	80071b0 <memcpy>
	}
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ef4:	f001 fdc0 	bl	8006a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f00:	e011      	b.n	8004f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3324      	adds	r3, #36	@ 0x24
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fd5c 	bl	80059cc <xTaskRemoveFromEventList>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f1a:	f000 fe35 	bl	8005b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dce9      	bgt.n	8004f02 <prvUnlockQueue+0x16>
 8004f2e:	e000      	b.n	8004f32 <prvUnlockQueue+0x46>
					break;
 8004f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	22ff      	movs	r2, #255	@ 0xff
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f3a:	f001 fdcf 	bl	8006adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f3e:	f001 fd9b 	bl	8006a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f4a:	e011      	b.n	8004f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d012      	beq.n	8004f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3310      	adds	r3, #16
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fd37 	bl	80059cc <xTaskRemoveFromEventList>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f64:	f000 fe10 	bl	8005b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f68:	7bbb      	ldrb	r3, [r7, #14]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	dce9      	bgt.n	8004f4c <prvUnlockQueue+0x60>
 8004f78:	e000      	b.n	8004f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	22ff      	movs	r2, #255	@ 0xff
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f84:	f001 fdaa 	bl	8006adc <vPortExitCritical>
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f98:	f001 fd6e 	bl	8006a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e001      	b.n	8004fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fd95 	bl	8006adc <vPortExitCritical>

	return xReturn;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fc4:	f001 fd58 	bl	8006a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d102      	bne.n	8004fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e001      	b.n	8004fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fde:	f001 fd7d 	bl	8006adc <vPortExitCritical>

	return xReturn;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	e014      	b.n	8005026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800503c <vQueueAddToRegistry+0x50>)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005008:	490c      	ldr	r1, [pc, #48]	@ (800503c <vQueueAddToRegistry+0x50>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005012:	4a0a      	ldr	r2, [pc, #40]	@ (800503c <vQueueAddToRegistry+0x50>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800501e:	e006      	b.n	800502e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b07      	cmp	r3, #7
 800502a:	d9e7      	bls.n	8004ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	200008f0 	.word	0x200008f0

08005040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005050:	f001 fd12 	bl	8006a78 <vPortEnterCritical>
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800505a:	b25b      	sxtb	r3, r3
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d103      	bne.n	800506a <vQueueWaitForMessageRestricted+0x2a>
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005070:	b25b      	sxtb	r3, r3
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d103      	bne.n	8005080 <vQueueWaitForMessageRestricted+0x40>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005080:	f001 fd2c 	bl	8006adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	3324      	adds	r3, #36	@ 0x24
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fc6d 	bl	8005974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff26 	bl	8004eec <prvUnlockQueue>
	}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	@ 0x38
 80050ac:	af04      	add	r7, sp, #16
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	623b      	str	r3, [r7, #32]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	61fb      	str	r3, [r7, #28]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050f2:	23a8      	movs	r3, #168	@ 0xa8
 80050f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80050fa:	d00b      	beq.n	8005114 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61bb      	str	r3, [r7, #24]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005114:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01e      	beq.n	800515a <xTaskCreateStatic+0xb2>
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800512a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	2202      	movs	r2, #2
 8005130:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005134:	2300      	movs	r3, #0
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	9302      	str	r3, [sp, #8]
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f851 	bl	80051f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005154:	f000 f8f6 	bl	8005344 <prvAddNewTaskToReadyList>
 8005158:	e001      	b.n	800515e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800515e:	697b      	ldr	r3, [r7, #20]
	}
 8005160:	4618      	mov	r0, r3
 8005162:	3728      	adds	r7, #40	@ 0x28
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af04      	add	r7, sp, #16
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4618      	mov	r0, r3
 800517e:	f001 fd9d 	bl	8006cbc <pvPortMalloc>
 8005182:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800518a:	20a8      	movs	r0, #168	@ 0xa8
 800518c:	f001 fd96 	bl	8006cbc <pvPortMalloc>
 8005190:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	631a      	str	r2, [r3, #48]	@ 0x30
 800519e:	e005      	b.n	80051ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051a0:	6978      	ldr	r0, [r7, #20]
 80051a2:	f001 fe59 	bl	8006e58 <vPortFree>
 80051a6:	e001      	b.n	80051ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d017      	beq.n	80051e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	2300      	movs	r3, #0
 80051be:	9303      	str	r3, [sp, #12]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f80f 	bl	80051f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051d6:	69f8      	ldr	r0, [r7, #28]
 80051d8:	f000 f8b4 	bl	8005344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051dc:	2301      	movs	r3, #1
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e002      	b.n	80051e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051e8:	69bb      	ldr	r3, [r7, #24]
	}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	461a      	mov	r2, r3
 800520c:	21a5      	movs	r1, #165	@ 0xa5
 800520e:	f001 ff43 	bl	8007098 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800521c:	3b01      	subs	r3, #1
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f023 0307 	bic.w	r3, r3, #7
 800522a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617b      	str	r3, [r7, #20]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e012      	b.n	8005280 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	7819      	ldrb	r1, [r3, #0]
 8005262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	3334      	adds	r3, #52	@ 0x34
 800526a:	460a      	mov	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d9e9      	bls.n	800525a <prvInitialiseNewTask+0x66>
 8005286:	e000      	b.n	800528a <prvInitialiseNewTask+0x96>
			{
				break;
 8005288:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005292:	e003      	b.n	800529c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	2b37      	cmp	r3, #55	@ 0x37
 80052a0:	d901      	bls.n	80052a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052a2:	2337      	movs	r3, #55	@ 0x37
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f8a7 	bl	8004410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	3318      	adds	r3, #24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f8a2 	bl	8004410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	3354      	adds	r3, #84	@ 0x54
 80052f6:	224c      	movs	r2, #76	@ 0x4c
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fecc 	bl	8007098 <memset>
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	4a0d      	ldr	r2, [pc, #52]	@ (8005338 <prvInitialiseNewTask+0x144>)
 8005304:	659a      	str	r2, [r3, #88]	@ 0x58
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	4a0c      	ldr	r2, [pc, #48]	@ (800533c <prvInitialiseNewTask+0x148>)
 800530a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	4a0c      	ldr	r2, [pc, #48]	@ (8005340 <prvInitialiseNewTask+0x14c>)
 8005310:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68f9      	ldr	r1, [r7, #12]
 8005316:	69b8      	ldr	r0, [r7, #24]
 8005318:	f001 fa7c 	bl	8006814 <pxPortInitialiseStack>
 800531c:	4602      	mov	r2, r0
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20004b84 	.word	0x20004b84
 800533c:	20004bec 	.word	0x20004bec
 8005340:	20004c54 	.word	0x20004c54

08005344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800534c:	f001 fb94 	bl	8006a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005350:	4b2d      	ldr	r3, [pc, #180]	@ (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a2c      	ldr	r2, [pc, #176]	@ (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800535a:	4b2c      	ldr	r3, [pc, #176]	@ (800540c <prvAddNewTaskToReadyList+0xc8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005362:	4a2a      	ldr	r2, [pc, #168]	@ (800540c <prvAddNewTaskToReadyList+0xc8>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005368:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <prvAddNewTaskToReadyList+0xc4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d110      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005370:	f000 fc2e 	bl	8005bd0 <prvInitialiseTaskLists>
 8005374:	e00d      	b.n	8005392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005376:	4b26      	ldr	r3, [pc, #152]	@ (8005410 <prvAddNewTaskToReadyList+0xcc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800537e:	4b23      	ldr	r3, [pc, #140]	@ (800540c <prvAddNewTaskToReadyList+0xc8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800538c:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <prvAddNewTaskToReadyList+0xc8>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005392:	4b20      	ldr	r3, [pc, #128]	@ (8005414 <prvAddNewTaskToReadyList+0xd0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <prvAddNewTaskToReadyList+0xd0>)
 800539a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800539c:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <prvAddNewTaskToReadyList+0xd0>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <prvAddNewTaskToReadyList+0xd4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d903      	bls.n	80053b8 <prvAddNewTaskToReadyList+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	4a18      	ldr	r2, [pc, #96]	@ (8005418 <prvAddNewTaskToReadyList+0xd4>)
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a15      	ldr	r2, [pc, #84]	@ (800541c <prvAddNewTaskToReadyList+0xd8>)
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7ff f82b 	bl	800442a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d4:	f001 fb82 	bl	8006adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <prvAddNewTaskToReadyList+0xcc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e0:	4b0a      	ldr	r3, [pc, #40]	@ (800540c <prvAddNewTaskToReadyList+0xc8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d207      	bcs.n	80053fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005420 <prvAddNewTaskToReadyList+0xdc>)
 80053f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000e04 	.word	0x20000e04
 800540c:	20000930 	.word	0x20000930
 8005410:	20000e10 	.word	0x20000e10
 8005414:	20000e20 	.word	0x20000e20
 8005418:	20000e0c 	.word	0x20000e0c
 800541c:	20000934 	.word	0x20000934
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005436:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <vTaskDelay+0x64>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <vTaskDelay+0x32>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60bb      	str	r3, [r7, #8]
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005456:	f000 f88b 	bl	8005570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fe2b 	bl	80060b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005462:	f000 f893 	bl	800558c <xTaskResumeAll>
 8005466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <vTaskDelay+0x68>)
 8005470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000e2c 	.word	0x20000e2c
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	@ 0x28
 8005494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549e:	463a      	mov	r2, r7
 80054a0:	1d39      	adds	r1, r7, #4
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe ff5e 	bl	8004368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	460a      	mov	r2, r1
 80054be:	4924      	ldr	r1, [pc, #144]	@ (8005550 <vTaskStartScheduler+0xc0>)
 80054c0:	4824      	ldr	r0, [pc, #144]	@ (8005554 <vTaskStartScheduler+0xc4>)
 80054c2:	f7ff fdf1 	bl	80050a8 <xTaskCreateStatic>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <vTaskStartScheduler+0xc8>)
 80054ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054cc:	4b22      	ldr	r3, [pc, #136]	@ (8005558 <vTaskStartScheduler+0xc8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e001      	b.n	80054de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d102      	bne.n	80054ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054e4:	f000 fe3c 	bl	8006160 <xTimerCreateTimerTask>
 80054e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d11b      	bne.n	8005528 <vTaskStartScheduler+0x98>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005504:	4b15      	ldr	r3, [pc, #84]	@ (800555c <vTaskStartScheduler+0xcc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3354      	adds	r3, #84	@ 0x54
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <vTaskStartScheduler+0xd0>)
 800550c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800550e:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <vTaskStartScheduler+0xd4>)
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005516:	4b14      	ldr	r3, [pc, #80]	@ (8005568 <vTaskStartScheduler+0xd8>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800551c:	4b13      	ldr	r3, [pc, #76]	@ (800556c <vTaskStartScheduler+0xdc>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005522:	f001 fa05 	bl	8006930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005526:	e00f      	b.n	8005548 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d10b      	bne.n	8005548 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	e7fd      	b.n	8005544 <vTaskStartScheduler+0xb4>
}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	080073b8 	.word	0x080073b8
 8005554:	08005ba1 	.word	0x08005ba1
 8005558:	20000e28 	.word	0x20000e28
 800555c:	20000930 	.word	0x20000930
 8005560:	20000020 	.word	0x20000020
 8005564:	20000e24 	.word	0x20000e24
 8005568:	20000e10 	.word	0x20000e10
 800556c:	20000e08 	.word	0x20000e08

08005570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005574:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <vTaskSuspendAll+0x18>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a03      	ldr	r2, [pc, #12]	@ (8005588 <vTaskSuspendAll+0x18>)
 800557c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000e2c 	.word	0x20000e2c

0800558c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800559a:	4b42      	ldr	r3, [pc, #264]	@ (80056a4 <xTaskResumeAll+0x118>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <xTaskResumeAll+0x2e>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	603b      	str	r3, [r7, #0]
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055ba:	f001 fa5d 	bl	8006a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055be:	4b39      	ldr	r3, [pc, #228]	@ (80056a4 <xTaskResumeAll+0x118>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	4a37      	ldr	r2, [pc, #220]	@ (80056a4 <xTaskResumeAll+0x118>)
 80055c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c8:	4b36      	ldr	r3, [pc, #216]	@ (80056a4 <xTaskResumeAll+0x118>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d162      	bne.n	8005696 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055d0:	4b35      	ldr	r3, [pc, #212]	@ (80056a8 <xTaskResumeAll+0x11c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05e      	beq.n	8005696 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055d8:	e02f      	b.n	800563a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055da:	4b34      	ldr	r3, [pc, #208]	@ (80056ac <xTaskResumeAll+0x120>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3318      	adds	r3, #24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe ff7c 	bl	80044e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe ff77 	bl	80044e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fa:	4b2d      	ldr	r3, [pc, #180]	@ (80056b0 <xTaskResumeAll+0x124>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d903      	bls.n	800560a <xTaskResumeAll+0x7e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	4a2a      	ldr	r2, [pc, #168]	@ (80056b0 <xTaskResumeAll+0x124>)
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4a27      	ldr	r2, [pc, #156]	@ (80056b4 <xTaskResumeAll+0x128>)
 8005618:	441a      	add	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3304      	adds	r3, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f7fe ff02 	bl	800442a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562a:	4b23      	ldr	r3, [pc, #140]	@ (80056b8 <xTaskResumeAll+0x12c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005634:	4b21      	ldr	r3, [pc, #132]	@ (80056bc <xTaskResumeAll+0x130>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800563a:	4b1c      	ldr	r3, [pc, #112]	@ (80056ac <xTaskResumeAll+0x120>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1cb      	bne.n	80055da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005648:	f000 fb66 	bl	8005d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800564c:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <xTaskResumeAll+0x134>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005658:	f000 f846 	bl	80056e8 <xTaskIncrementTick>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005662:	4b16      	ldr	r3, [pc, #88]	@ (80056bc <xTaskResumeAll+0x130>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f1      	bne.n	8005658 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005674:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <xTaskResumeAll+0x134>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800567a:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <xTaskResumeAll+0x130>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005686:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <xTaskResumeAll+0x138>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005696:	f001 fa21 	bl	8006adc <vPortExitCritical>

	return xAlreadyYielded;
 800569a:	68bb      	ldr	r3, [r7, #8]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000e2c 	.word	0x20000e2c
 80056a8:	20000e04 	.word	0x20000e04
 80056ac:	20000dc4 	.word	0x20000dc4
 80056b0:	20000e0c 	.word	0x20000e0c
 80056b4:	20000934 	.word	0x20000934
 80056b8:	20000930 	.word	0x20000930
 80056bc:	20000e18 	.word	0x20000e18
 80056c0:	20000e14 	.word	0x20000e14
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <xTaskGetTickCount+0x1c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000e08 	.word	0x20000e08

080056e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005830 <xTaskIncrementTick+0x148>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 8090 	bne.w	800581c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005834 <xTaskIncrementTick+0x14c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005704:	4a4b      	ldr	r2, [pc, #300]	@ (8005834 <xTaskIncrementTick+0x14c>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d121      	bne.n	8005754 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005710:	4b49      	ldr	r3, [pc, #292]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <xTaskIncrementTick+0x4a>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <xTaskIncrementTick+0x46>
 8005732:	4b41      	ldr	r3, [pc, #260]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	4b40      	ldr	r3, [pc, #256]	@ (800583c <xTaskIncrementTick+0x154>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3e      	ldr	r2, [pc, #248]	@ (8005838 <xTaskIncrementTick+0x150>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4a3e      	ldr	r2, [pc, #248]	@ (800583c <xTaskIncrementTick+0x154>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b3e      	ldr	r3, [pc, #248]	@ (8005840 <xTaskIncrementTick+0x158>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a3c      	ldr	r2, [pc, #240]	@ (8005840 <xTaskIncrementTick+0x158>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f000 fae2 	bl	8005d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005754:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <xTaskIncrementTick+0x15c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d349      	bcc.n	80057f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575e:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005768:	4b36      	ldr	r3, [pc, #216]	@ (8005844 <xTaskIncrementTick+0x15c>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295
 800576e:	601a      	str	r2, [r3, #0]
					break;
 8005770:	e03f      	b.n	80057f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005772:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d203      	bcs.n	8005792 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800578a:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <xTaskIncrementTick+0x15c>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005790:	e02f      	b.n	80057f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7fe fea4 	bl	80044e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	3318      	adds	r3, #24
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fe fe9b 	bl	80044e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <xTaskIncrementTick+0x160>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d903      	bls.n	80057c2 <xTaskIncrementTick+0xda>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <xTaskIncrementTick+0x160>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <xTaskIncrementTick+0x164>)
 80057d0:	441a      	add	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe fe26 	bl	800442a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <xTaskIncrementTick+0x168>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d3b8      	bcc.n	800575e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f0:	e7b5      	b.n	800575e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <xTaskIncrementTick+0x168>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f8:	4914      	ldr	r1, [pc, #80]	@ (800584c <xTaskIncrementTick+0x164>)
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d901      	bls.n	800580e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800580e:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <xTaskIncrementTick+0x16c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005816:	2301      	movs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e004      	b.n	8005826 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800581c:	4b0e      	ldr	r3, [pc, #56]	@ (8005858 <xTaskIncrementTick+0x170>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a0d      	ldr	r2, [pc, #52]	@ (8005858 <xTaskIncrementTick+0x170>)
 8005824:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005826:	697b      	ldr	r3, [r7, #20]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20000e2c 	.word	0x20000e2c
 8005834:	20000e08 	.word	0x20000e08
 8005838:	20000dbc 	.word	0x20000dbc
 800583c:	20000dc0 	.word	0x20000dc0
 8005840:	20000e1c 	.word	0x20000e1c
 8005844:	20000e24 	.word	0x20000e24
 8005848:	20000e0c 	.word	0x20000e0c
 800584c:	20000934 	.word	0x20000934
 8005850:	20000930 	.word	0x20000930
 8005854:	20000e18 	.word	0x20000e18
 8005858:	20000e14 	.word	0x20000e14

0800585c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005862:	4b2b      	ldr	r3, [pc, #172]	@ (8005910 <vTaskSwitchContext+0xb4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800586a:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <vTaskSwitchContext+0xb8>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005870:	e047      	b.n	8005902 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005872:	4b28      	ldr	r3, [pc, #160]	@ (8005914 <vTaskSwitchContext+0xb8>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005878:	4b27      	ldr	r3, [pc, #156]	@ (8005918 <vTaskSwitchContext+0xbc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e011      	b.n	80058a4 <vTaskSwitchContext+0x48>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <vTaskSwitchContext+0x42>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	607b      	str	r3, [r7, #4]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <vTaskSwitchContext+0x3e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	491d      	ldr	r1, [pc, #116]	@ (800591c <vTaskSwitchContext+0xc0>)
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0e3      	beq.n	8005880 <vTaskSwitchContext+0x24>
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4a16      	ldr	r2, [pc, #88]	@ (800591c <vTaskSwitchContext+0xc0>)
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	3308      	adds	r3, #8
 80058da:	429a      	cmp	r2, r3
 80058dc:	d104      	bne.n	80058e8 <vTaskSwitchContext+0x8c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005920 <vTaskSwitchContext+0xc4>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <vTaskSwitchContext+0xbc>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058f8:	4b09      	ldr	r3, [pc, #36]	@ (8005920 <vTaskSwitchContext+0xc4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3354      	adds	r3, #84	@ 0x54
 80058fe:	4a09      	ldr	r2, [pc, #36]	@ (8005924 <vTaskSwitchContext+0xc8>)
 8005900:	6013      	str	r3, [r2, #0]
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000e2c 	.word	0x20000e2c
 8005914:	20000e18 	.word	0x20000e18
 8005918:	20000e0c 	.word	0x20000e0c
 800591c:	20000934 	.word	0x20000934
 8005920:	20000930 	.word	0x20000930
 8005924:	20000020 	.word	0x20000020

08005928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005950:	4b07      	ldr	r3, [pc, #28]	@ (8005970 <vTaskPlaceOnEventList+0x48>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3318      	adds	r3, #24
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fe fd8a 	bl	8004472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800595e:	2101      	movs	r1, #1
 8005960:	6838      	ldr	r0, [r7, #0]
 8005962:	f000 fba9 	bl	80060b8 <prvAddCurrentTaskToDelayedList>
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000930 	.word	0x20000930

08005974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	617b      	str	r3, [r7, #20]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599e:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3318      	adds	r3, #24
 80059a4:	4619      	mov	r1, r3
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7fe fd3f 	bl	800442a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	f000 fb7c 	bl	80060b8 <prvAddCurrentTaskToDelayedList>
	}
 80059c0:	bf00      	nop
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000930 	.word	0x20000930

080059cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop
 80059f8:	e7fd      	b.n	80059f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3318      	adds	r3, #24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fd70 	bl	80044e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a04:	4b1d      	ldr	r3, [pc, #116]	@ (8005a7c <xTaskRemoveFromEventList+0xb0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11d      	bne.n	8005a48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe fd67 	bl	80044e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1a:	4b19      	ldr	r3, [pc, #100]	@ (8005a80 <xTaskRemoveFromEventList+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d903      	bls.n	8005a2a <xTaskRemoveFromEventList+0x5e>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <xTaskRemoveFromEventList+0xb4>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a13      	ldr	r2, [pc, #76]	@ (8005a84 <xTaskRemoveFromEventList+0xb8>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fe fcf2 	bl	800442a <vListInsertEnd>
 8005a46:	e005      	b.n	8005a54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	3318      	adds	r3, #24
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	480e      	ldr	r0, [pc, #56]	@ (8005a88 <xTaskRemoveFromEventList+0xbc>)
 8005a50:	f7fe fceb 	bl	800442a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <xTaskRemoveFromEventList+0xc0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d905      	bls.n	8005a6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <xTaskRemoveFromEventList+0xc4>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e001      	b.n	8005a72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20000e2c 	.word	0x20000e2c
 8005a80:	20000e0c 	.word	0x20000e0c
 8005a84:	20000934 	.word	0x20000934
 8005a88:	20000dc4 	.word	0x20000dc4
 8005a8c:	20000930 	.word	0x20000930
 8005a90:	20000e18 	.word	0x20000e18

08005a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <vTaskInternalSetTimeOutState+0x24>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <vTaskInternalSetTimeOutState+0x28>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	605a      	str	r2, [r3, #4]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20000e1c 	.word	0x20000e1c
 8005abc:	20000e08 	.word	0x20000e08

08005ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
}
 8005ae2:	bf00      	nop
 8005ae4:	bf00      	nop
 8005ae6:	e7fd      	b.n	8005ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10b      	bne.n	8005b06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005b06:	f000 ffb7 	bl	8006a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <xTaskCheckForTimeOut+0xc0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d102      	bne.n	8005b2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e023      	b.n	8005b72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <xTaskCheckForTimeOut+0xc4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d007      	beq.n	8005b46 <xTaskCheckForTimeOut+0x86>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	e015      	b.n	8005b72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d20b      	bcs.n	8005b68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff99 	bl	8005a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e004      	b.n	8005b72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b72:	f000 ffb3 	bl	8006adc <vPortExitCritical>

	return xReturn;
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000e08 	.word	0x20000e08
 8005b84:	20000e1c 	.word	0x20000e1c

08005b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	@ (8005b9c <vTaskMissedYield+0x14>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20000e18 	.word	0x20000e18

08005ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba8:	f000 f852 	bl	8005c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bac:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <prvIdleTask+0x28>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d9f9      	bls.n	8005ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <prvIdleTask+0x2c>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bc4:	e7f0      	b.n	8005ba8 <prvIdleTask+0x8>
 8005bc6:	bf00      	nop
 8005bc8:	20000934 	.word	0x20000934
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e00c      	b.n	8005bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <prvInitialiseTaskLists+0x60>)
 8005be8:	4413      	add	r3, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fbf0 	bl	80043d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b37      	cmp	r3, #55	@ 0x37
 8005bfa:	d9ef      	bls.n	8005bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bfc:	480d      	ldr	r0, [pc, #52]	@ (8005c34 <prvInitialiseTaskLists+0x64>)
 8005bfe:	f7fe fbe7 	bl	80043d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c02:	480d      	ldr	r0, [pc, #52]	@ (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c04:	f7fe fbe4 	bl	80043d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c08:	480c      	ldr	r0, [pc, #48]	@ (8005c3c <prvInitialiseTaskLists+0x6c>)
 8005c0a:	f7fe fbe1 	bl	80043d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c0e:	480c      	ldr	r0, [pc, #48]	@ (8005c40 <prvInitialiseTaskLists+0x70>)
 8005c10:	f7fe fbde 	bl	80043d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c14:	480b      	ldr	r0, [pc, #44]	@ (8005c44 <prvInitialiseTaskLists+0x74>)
 8005c16:	f7fe fbdb 	bl	80043d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <prvInitialiseTaskLists+0x78>)
 8005c1c:	4a05      	ldr	r2, [pc, #20]	@ (8005c34 <prvInitialiseTaskLists+0x64>)
 8005c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <prvInitialiseTaskLists+0x7c>)
 8005c22:	4a05      	ldr	r2, [pc, #20]	@ (8005c38 <prvInitialiseTaskLists+0x68>)
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000934 	.word	0x20000934
 8005c34:	20000d94 	.word	0x20000d94
 8005c38:	20000da8 	.word	0x20000da8
 8005c3c:	20000dc4 	.word	0x20000dc4
 8005c40:	20000dd8 	.word	0x20000dd8
 8005c44:	20000df0 	.word	0x20000df0
 8005c48:	20000dbc 	.word	0x20000dbc
 8005c4c:	20000dc0 	.word	0x20000dc0

08005c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c56:	e019      	b.n	8005c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c58:	f000 ff0e 	bl	8006a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <prvCheckTasksWaitingTermination+0x50>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fe fc3b 	bl	80044e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca4 <prvCheckTasksWaitingTermination+0x54>)
 8005c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c82:	f000 ff2b 	bl	8006adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f810 	bl	8005cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ca8 <prvCheckTasksWaitingTermination+0x58>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e1      	bne.n	8005c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000dd8 	.word	0x20000dd8
 8005ca4:	20000e04 	.word	0x20000e04
 8005ca8:	20000dec 	.word	0x20000dec

08005cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3354      	adds	r3, #84	@ 0x54
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f9f5 	bl	80070a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 f8c3 	bl	8006e58 <vPortFree>
				vPortFree( pxTCB );
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 f8c0 	bl	8006e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd8:	e019      	b.n	8005d0e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d103      	bne.n	8005cec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 f8b7 	bl	8006e58 <vPortFree>
	}
 8005cea:	e010      	b.n	8005d0e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d00b      	beq.n	8005d0e <prvDeleteTCB+0x62>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <prvDeleteTCB+0x5e>
	}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <prvResetNextTaskUnblockTime+0x38>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d104      	bne.n	8005d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <prvResetNextTaskUnblockTime+0x3c>)
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d30:	e008      	b.n	8005d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d32:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <prvResetNextTaskUnblockTime+0x38>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <prvResetNextTaskUnblockTime+0x3c>)
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20000dbc 	.word	0x20000dbc
 8005d54:	20000e24 	.word	0x20000e24

08005d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <xTaskGetSchedulerState+0x34>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d66:	2301      	movs	r3, #1
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e008      	b.n	8005d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d6c:	4b08      	ldr	r3, [pc, #32]	@ (8005d90 <xTaskGetSchedulerState+0x38>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d74:	2302      	movs	r3, #2
 8005d76:	607b      	str	r3, [r7, #4]
 8005d78:	e001      	b.n	8005d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d7e:	687b      	ldr	r3, [r7, #4]
	}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000e10 	.word	0x20000e10
 8005d90:	20000e2c 	.word	0x20000e2c

08005d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d058      	beq.n	8005e5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005daa:	4b2f      	ldr	r3, [pc, #188]	@ (8005e68 <xTaskPriorityDisinherit+0xd4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d00b      	beq.n	8005dcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	60fb      	str	r3, [r7, #12]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d02c      	beq.n	8005e5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d128      	bne.n	8005e5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fb68 	bl	80044e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <xTaskPriorityDisinherit+0xd8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d903      	bls.n	8005e3c <xTaskPriorityDisinherit+0xa8>
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	4a0c      	ldr	r2, [pc, #48]	@ (8005e6c <xTaskPriorityDisinherit+0xd8>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a09      	ldr	r2, [pc, #36]	@ (8005e70 <xTaskPriorityDisinherit+0xdc>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fae9 	bl	800442a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e5c:	697b      	ldr	r3, [r7, #20]
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000930 	.word	0x20000930
 8005e6c:	20000e0c 	.word	0x20000e0c
 8005e70:	20000934 	.word	0x20000934

08005e74 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005e82:	f000 fdf9 	bl	8006a78 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005e86:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d01c      	beq.n	8005ece <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005e94:	4b25      	ldr	r3, [pc, #148]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	43d2      	mvns	r2, r2
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005ea6:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6838      	ldr	r0, [r7, #0]
 8005eba:	f000 f8fd 	bl	80060b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <xTaskNotifyWait+0xbc>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005ece:	f000 fe05 	bl	8006adc <vPortExitCritical>

		taskENTER_CRITICAL();
 8005ed2:	f000 fdd1 	bl	8006a78 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005edc:	4b13      	ldr	r3, [pc, #76]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005ee8:	4b10      	ldr	r3, [pc, #64]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d002      	beq.n	8005efc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e00a      	b.n	8005f12 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	43d2      	mvns	r2, r2
 8005f08:	400a      	ands	r2, r1
 8005f0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f12:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <xTaskNotifyWait+0xb8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8005f1c:	f000 fdde 	bl	8006adc <vPortExitCritical>

		return xReturn;
 8005f20:	697b      	ldr	r3, [r7, #20]
	}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000930 	.word	0x20000930
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005f44:	2301      	movs	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <xTaskGenericNotify+0x32>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	61bb      	str	r3, [r7, #24]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005f6a:	f000 fd85 	bl	8006a78 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005f84:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d82e      	bhi.n	8005ff2 <xTaskGenericNotify+0xbe>
 8005f94:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <xTaskGenericNotify+0x68>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08006017 	.word	0x08006017
 8005fa0:	08005fb1 	.word	0x08005fb1
 8005fa4:	08005fc3 	.word	0x08005fc3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fdd 	.word	0x08005fdd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005fc0:	e02c      	b.n	800601c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005fd0:	e024      	b.n	800601c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005fda:	e01f      	b.n	800601c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005fdc:	7ffb      	ldrb	r3, [r7, #31]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d004      	beq.n	8005fec <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005fea:	e017      	b.n	800601c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005ff0:	e014      	b.n	800601c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d00d      	beq.n	800601a <xTaskGenericNotify+0xe6>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	617b      	str	r3, [r7, #20]
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xTaskGenericNotify+0xde>
					break;
 8006016:	bf00      	nop
 8006018:	e000      	b.n	800601c <xTaskGenericNotify+0xe8>

					break;
 800601a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800601c:	7ffb      	ldrb	r3, [r7, #31]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d13b      	bne.n	800609a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	3304      	adds	r3, #4
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fa5c 	bl	80044e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <xTaskGenericNotify+0x174>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <xTaskGenericNotify+0x10c>
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	4a1a      	ldr	r2, [pc, #104]	@ (80060a8 <xTaskGenericNotify+0x174>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4a17      	ldr	r2, [pc, #92]	@ (80060ac <xTaskGenericNotify+0x178>)
 800604e:	441a      	add	r2, r3
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe f9e7 	bl	800442a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <xTaskGenericNotify+0x148>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	613b      	str	r3, [r7, #16]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <xTaskGenericNotify+0x17c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	429a      	cmp	r2, r3
 8006088:	d907      	bls.n	800609a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800608a:	4b0a      	ldr	r3, [pc, #40]	@ (80060b4 <xTaskGenericNotify+0x180>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800609a:	f000 fd1f 	bl	8006adc <vPortExitCritical>

		return xReturn;
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	@ 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20000e0c 	.word	0x20000e0c
 80060ac:	20000934 	.word	0x20000934
 80060b0:	20000930 	.word	0x20000930
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060c2:	4b21      	ldr	r3, [pc, #132]	@ (8006148 <prvAddCurrentTaskToDelayedList+0x90>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c8:	4b20      	ldr	r3, [pc, #128]	@ (800614c <prvAddCurrentTaskToDelayedList+0x94>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fa08 	bl	80044e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d10a      	bne.n	80060f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e2:	4b1a      	ldr	r3, [pc, #104]	@ (800614c <prvAddCurrentTaskToDelayedList+0x94>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4819      	ldr	r0, [pc, #100]	@ (8006150 <prvAddCurrentTaskToDelayedList+0x98>)
 80060ec:	f7fe f99d 	bl	800442a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060f0:	e026      	b.n	8006140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060fa:	4b14      	ldr	r3, [pc, #80]	@ (800614c <prvAddCurrentTaskToDelayedList+0x94>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	429a      	cmp	r2, r3
 8006108:	d209      	bcs.n	800611e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800610a:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b0f      	ldr	r3, [pc, #60]	@ (800614c <prvAddCurrentTaskToDelayedList+0x94>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fe f9ab 	bl	8004472 <vListInsert>
}
 800611c:	e010      	b.n	8006140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611e:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <prvAddCurrentTaskToDelayedList+0x94>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3304      	adds	r3, #4
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fe f9a1 	bl	8004472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006130:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d202      	bcs.n	8006140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800613a:	4a08      	ldr	r2, [pc, #32]	@ (800615c <prvAddCurrentTaskToDelayedList+0xa4>)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6013      	str	r3, [r2, #0]
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000e08 	.word	0x20000e08
 800614c:	20000930 	.word	0x20000930
 8006150:	20000df0 	.word	0x20000df0
 8006154:	20000dc0 	.word	0x20000dc0
 8006158:	20000dbc 	.word	0x20000dbc
 800615c:	20000e24 	.word	0x20000e24

08006160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	@ 0x28
 8006164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800616a:	f000 fb13 	bl	8006794 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800616e:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <xTimerCreateTimerTask+0x84>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d021      	beq.n	80061ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800617e:	1d3a      	adds	r2, r7, #4
 8006180:	f107 0108 	add.w	r1, r7, #8
 8006184:	f107 030c 	add.w	r3, r7, #12
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe f907 	bl	800439c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	9202      	str	r2, [sp, #8]
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	2302      	movs	r3, #2
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2300      	movs	r3, #0
 800619e:	460a      	mov	r2, r1
 80061a0:	4911      	ldr	r1, [pc, #68]	@ (80061e8 <xTimerCreateTimerTask+0x88>)
 80061a2:	4812      	ldr	r0, [pc, #72]	@ (80061ec <xTimerCreateTimerTask+0x8c>)
 80061a4:	f7fe ff80 	bl	80050a8 <xTaskCreateStatic>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4a11      	ldr	r2, [pc, #68]	@ (80061f0 <xTimerCreateTimerTask+0x90>)
 80061ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061ae:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <xTimerCreateTimerTask+0x90>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061b6:	2301      	movs	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	613b      	str	r3, [r7, #16]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061d8:	697b      	ldr	r3, [r7, #20]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000e60 	.word	0x20000e60
 80061e8:	080073c0 	.word	0x080073c0
 80061ec:	0800632d 	.word	0x0800632d
 80061f0:	20000e64 	.word	0x20000e64

080061f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	@ 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006202:	2300      	movs	r3, #0
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <xTimerGenericCommand+0x30>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	623b      	str	r3, [r7, #32]
}
 800621e:	bf00      	nop
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006224:	4b19      	ldr	r3, [pc, #100]	@ (800628c <xTimerGenericCommand+0x98>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02a      	beq.n	8006282 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b05      	cmp	r3, #5
 800623c:	dc18      	bgt.n	8006270 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800623e:	f7ff fd8b 	bl	8005d58 <xTaskGetSchedulerState>
 8006242:	4603      	mov	r3, r0
 8006244:	2b02      	cmp	r3, #2
 8006246:	d109      	bne.n	800625c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006248:	4b10      	ldr	r3, [pc, #64]	@ (800628c <xTimerGenericCommand+0x98>)
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	f107 0110 	add.w	r1, r7, #16
 8006250:	2300      	movs	r3, #0
 8006252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006254:	f7fe fab6 	bl	80047c4 <xQueueGenericSend>
 8006258:	6278      	str	r0, [r7, #36]	@ 0x24
 800625a:	e012      	b.n	8006282 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <xTimerGenericCommand+0x98>)
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	f107 0110 	add.w	r1, r7, #16
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	f7fe faac 	bl	80047c4 <xQueueGenericSend>
 800626c:	6278      	str	r0, [r7, #36]	@ 0x24
 800626e:	e008      	b.n	8006282 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006270:	4b06      	ldr	r3, [pc, #24]	@ (800628c <xTimerGenericCommand+0x98>)
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	f107 0110 	add.w	r1, r7, #16
 8006278:	2300      	movs	r3, #0
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	f7fe fba4 	bl	80049c8 <xQueueGenericSendFromISR>
 8006280:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000e60 	.word	0x20000e60

08006290 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629a:	4b23      	ldr	r3, [pc, #140]	@ (8006328 <prvProcessExpiredTimer+0x98>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	3304      	adds	r3, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe f91b 	bl	80044e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d023      	beq.n	8006304 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	18d1      	adds	r1, r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	6978      	ldr	r0, [r7, #20]
 80062ca:	f000 f8d5 	bl	8006478 <prvInsertTimerInActiveList>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	2100      	movs	r1, #0
 80062de:	6978      	ldr	r0, [r7, #20]
 80062e0:	f7ff ff88 	bl	80061f4 <xTimerGenericCommand>
 80062e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d114      	bne.n	8006316 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	4798      	blx	r3
}
 800631e:	bf00      	nop
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000e58 	.word	0x20000e58

0800632c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006334:	f107 0308 	add.w	r3, r7, #8
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f859 	bl	80063f0 <prvGetNextExpireTime>
 800633e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4619      	mov	r1, r3
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f805 	bl	8006354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800634a:	f000 f8d7 	bl	80064fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800634e:	bf00      	nop
 8006350:	e7f0      	b.n	8006334 <prvTimerTask+0x8>
	...

08006354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800635e:	f7ff f907 	bl	8005570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f866 	bl	8006438 <prvSampleTimeNow>
 800636c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d130      	bne.n	80063d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <prvProcessTimerOrBlockTask+0x3c>
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	429a      	cmp	r2, r3
 8006380:	d806      	bhi.n	8006390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006382:	f7ff f903 	bl	800558c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff81 	bl	8006290 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800638e:	e024      	b.n	80063da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006396:	4b13      	ldr	r3, [pc, #76]	@ (80063e4 <prvProcessTimerOrBlockTask+0x90>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <prvProcessTimerOrBlockTask+0x50>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <prvProcessTimerOrBlockTask+0x52>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063a8:	4b0f      	ldr	r3, [pc, #60]	@ (80063e8 <prvProcessTimerOrBlockTask+0x94>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4619      	mov	r1, r3
 80063b6:	f7fe fe43 	bl	8005040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ba:	f7ff f8e7 	bl	800558c <xTaskResumeAll>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063c4:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <prvProcessTimerOrBlockTask+0x98>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
}
 80063d4:	e001      	b.n	80063da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063d6:	f7ff f8d9 	bl	800558c <xTaskResumeAll>
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000e5c 	.word	0x20000e5c
 80063e8:	20000e60 	.word	0x20000e60
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006434 <prvGetNextExpireTime+0x44>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <prvGetNextExpireTime+0x16>
 8006402:	2201      	movs	r2, #1
 8006404:	e000      	b.n	8006408 <prvGetNextExpireTime+0x18>
 8006406:	2200      	movs	r2, #0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <prvGetNextExpireTime+0x44>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e001      	b.n	8006424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000e58 	.word	0x20000e58

08006438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006440:	f7ff f942 	bl	80056c8 <xTaskGetTickCount>
 8006444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006446:	4b0b      	ldr	r3, [pc, #44]	@ (8006474 <prvSampleTimeNow+0x3c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	429a      	cmp	r2, r3
 800644e:	d205      	bcs.n	800645c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006450:	f000 f93a 	bl	80066c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e002      	b.n	8006462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006462:	4a04      	ldr	r2, [pc, #16]	@ (8006474 <prvSampleTimeNow+0x3c>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006468:	68fb      	ldr	r3, [r7, #12]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000e68 	.word	0x20000e68

08006478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d812      	bhi.n	80064c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e01b      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <prvInsertTimerInActiveList+0x7c>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fd ffd8 	bl	8004472 <vListInsert>
 80064c2:	e012      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d206      	bcs.n	80064da <prvInsertTimerInActiveList+0x62>
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e007      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064da:	4b07      	ldr	r3, [pc, #28]	@ (80064f8 <prvInsertTimerInActiveList+0x80>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fd ffc4 	bl	8004472 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000e5c 	.word	0x20000e5c
 80064f8:	20000e58 	.word	0x20000e58

080064fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	@ 0x38
 8006500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006502:	e0ce      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da19      	bge.n	800653e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	3304      	adds	r3, #4
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61fb      	str	r3, [r7, #28]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006534:	6850      	ldr	r0, [r2, #4]
 8006536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006538:	6892      	ldr	r2, [r2, #8]
 800653a:	4611      	mov	r1, r2
 800653c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f2c0 80ae 	blt.w	80066a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	3304      	adds	r3, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fd ffc4 	bl	80044e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800655c:	463b      	mov	r3, r7
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff6a 	bl	8006438 <prvSampleTimeNow>
 8006564:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b09      	cmp	r3, #9
 800656a:	f200 8097 	bhi.w	800669c <prvProcessReceivedCommands+0x1a0>
 800656e:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <prvProcessReceivedCommands+0x78>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	0800659d 	.word	0x0800659d
 8006578:	0800659d 	.word	0x0800659d
 800657c:	0800659d 	.word	0x0800659d
 8006580:	08006613 	.word	0x08006613
 8006584:	08006627 	.word	0x08006627
 8006588:	08006673 	.word	0x08006673
 800658c:	0800659d 	.word	0x0800659d
 8006590:	0800659d 	.word	0x0800659d
 8006594:	08006613 	.word	0x08006613
 8006598:	08006627 	.word	0x08006627
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	18d1      	adds	r1, r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065bc:	f7ff ff5c 	bl	8006478 <prvInsertTimerInActiveList>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d06c      	beq.n	80066a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d061      	beq.n	80066a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	441a      	add	r2, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2300      	movs	r3, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ee:	f7ff fe01 	bl	80061f4 <xTimerGenericCommand>
 80065f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d152      	bne.n	80066a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61bb      	str	r3, [r7, #24]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006624:	e03d      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800662c:	f043 0301 	orr.w	r3, r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	18d1      	adds	r1, r2, r3
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800666c:	f7ff ff04 	bl	8006478 <prvInsertTimerInActiveList>
					break;
 8006670:	e017      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006682:	f000 fbe9 	bl	8006e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006686:	e00c      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800669a:	e002      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80066a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066a2:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <prvProcessReceivedCommands+0x1c8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	1d39      	adds	r1, r7, #4
 80066a8:	2200      	movs	r2, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fa2a 	bl	8004b04 <xQueueReceive>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f af26 	bne.w	8006504 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066b8:	bf00      	nop
 80066ba:	bf00      	nop
 80066bc:	3730      	adds	r7, #48	@ 0x30
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000e60 	.word	0x20000e60

080066c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ce:	e049      	b.n	8006764 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d0:	4b2e      	ldr	r3, [pc, #184]	@ (800678c <prvSwitchTimerLists+0xc4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066da:	4b2c      	ldr	r3, [pc, #176]	@ (800678c <prvSwitchTimerLists+0xc4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fd fefb 	bl	80044e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d02f      	beq.n	8006764 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4413      	add	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d90e      	bls.n	8006734 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006722:	4b1a      	ldr	r3, [pc, #104]	@ (800678c <prvSwitchTimerLists+0xc4>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fd fea0 	bl	8004472 <vListInsert>
 8006732:	e017      	b.n	8006764 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006734:	2300      	movs	r3, #0
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	2100      	movs	r1, #0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fd58 	bl	80061f4 <xTimerGenericCommand>
 8006744:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	603b      	str	r3, [r7, #0]
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006764:	4b09      	ldr	r3, [pc, #36]	@ (800678c <prvSwitchTimerLists+0xc4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1b0      	bne.n	80066d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800676e:	4b07      	ldr	r3, [pc, #28]	@ (800678c <prvSwitchTimerLists+0xc4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <prvSwitchTimerLists+0xc8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a04      	ldr	r2, [pc, #16]	@ (800678c <prvSwitchTimerLists+0xc4>)
 800677a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800677c:	4a04      	ldr	r2, [pc, #16]	@ (8006790 <prvSwitchTimerLists+0xc8>)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	6013      	str	r3, [r2, #0]
}
 8006782:	bf00      	nop
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000e58 	.word	0x20000e58
 8006790:	20000e5c 	.word	0x20000e5c

08006794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800679a:	f000 f96d 	bl	8006a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800679e:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <prvCheckForValidListAndQueue+0x60>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d120      	bne.n	80067e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067a6:	4814      	ldr	r0, [pc, #80]	@ (80067f8 <prvCheckForValidListAndQueue+0x64>)
 80067a8:	f7fd fe12 	bl	80043d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067ac:	4813      	ldr	r0, [pc, #76]	@ (80067fc <prvCheckForValidListAndQueue+0x68>)
 80067ae:	f7fd fe0f 	bl	80043d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067b2:	4b13      	ldr	r3, [pc, #76]	@ (8006800 <prvCheckForValidListAndQueue+0x6c>)
 80067b4:	4a10      	ldr	r2, [pc, #64]	@ (80067f8 <prvCheckForValidListAndQueue+0x64>)
 80067b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067b8:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <prvCheckForValidListAndQueue+0x70>)
 80067ba:	4a10      	ldr	r2, [pc, #64]	@ (80067fc <prvCheckForValidListAndQueue+0x68>)
 80067bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4b11      	ldr	r3, [pc, #68]	@ (8006808 <prvCheckForValidListAndQueue+0x74>)
 80067c4:	4a11      	ldr	r2, [pc, #68]	@ (800680c <prvCheckForValidListAndQueue+0x78>)
 80067c6:	2110      	movs	r1, #16
 80067c8:	200a      	movs	r0, #10
 80067ca:	f7fd ff1f 	bl	800460c <xQueueGenericCreateStatic>
 80067ce:	4603      	mov	r3, r0
 80067d0:	4a08      	ldr	r2, [pc, #32]	@ (80067f4 <prvCheckForValidListAndQueue+0x60>)
 80067d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067d4:	4b07      	ldr	r3, [pc, #28]	@ (80067f4 <prvCheckForValidListAndQueue+0x60>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <prvCheckForValidListAndQueue+0x60>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	490b      	ldr	r1, [pc, #44]	@ (8006810 <prvCheckForValidListAndQueue+0x7c>)
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fc02 	bl	8004fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e8:	f000 f978 	bl	8006adc <vPortExitCritical>
}
 80067ec:	bf00      	nop
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000e60 	.word	0x20000e60
 80067f8:	20000e30 	.word	0x20000e30
 80067fc:	20000e44 	.word	0x20000e44
 8006800:	20000e58 	.word	0x20000e58
 8006804:	20000e5c 	.word	0x20000e5c
 8006808:	20000f0c 	.word	0x20000f0c
 800680c:	20000e6c 	.word	0x20000e6c
 8006810:	080073c8 	.word	0x080073c8

08006814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3b04      	subs	r3, #4
 8006824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800682c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f023 0201 	bic.w	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b04      	subs	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006844:	4a0c      	ldr	r2, [pc, #48]	@ (8006878 <pxPortInitialiseStack+0x64>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3b14      	subs	r3, #20
 800684e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b04      	subs	r3, #4
 800685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f06f 0202 	mvn.w	r2, #2
 8006862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b20      	subs	r3, #32
 8006868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	0800687d 	.word	0x0800687d

0800687c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006886:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <prvTaskExitError+0x58>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d00b      	beq.n	80068a8 <prvTaskExitError+0x2c>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	e7fd      	b.n	80068a4 <prvTaskExitError+0x28>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	60bb      	str	r3, [r7, #8]
}
 80068ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068bc:	bf00      	nop
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0fc      	beq.n	80068be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2000001c 	.word	0x2000001c
	...

080068e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068e0:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <pxCurrentTCBConst2>)
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	6808      	ldr	r0, [r1, #0]
 80068e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	f380 8809 	msr	PSP, r0
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8811 	msr	BASEPRI, r0
 80068fa:	4770      	bx	lr
 80068fc:	f3af 8000 	nop.w

08006900 <pxCurrentTCBConst2>:
 8006900:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop

08006908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006908:	4808      	ldr	r0, [pc, #32]	@ (800692c <prvPortStartFirstTask+0x24>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8814 	msr	CONTROL, r0
 800691a:	b662      	cpsie	i
 800691c:	b661      	cpsie	f
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	df00      	svc	0
 8006928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800692a:	bf00      	nop
 800692c:	e000ed08 	.word	0xe000ed08

08006930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006936:	4b47      	ldr	r3, [pc, #284]	@ (8006a54 <xPortStartScheduler+0x124>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a47      	ldr	r2, [pc, #284]	@ (8006a58 <xPortStartScheduler+0x128>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10b      	bne.n	8006958 <xPortStartScheduler+0x28>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006958:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <xPortStartScheduler+0x124>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a5c <xPortStartScheduler+0x12c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10b      	bne.n	800697a <xPortStartScheduler+0x4a>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	613b      	str	r3, [r7, #16]
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800697a:	4b39      	ldr	r3, [pc, #228]	@ (8006a60 <xPortStartScheduler+0x130>)
 800697c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	22ff      	movs	r2, #255	@ 0xff
 800698a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800699c:	b2da      	uxtb	r2, r3
 800699e:	4b31      	ldr	r3, [pc, #196]	@ (8006a64 <xPortStartScheduler+0x134>)
 80069a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069a2:	4b31      	ldr	r3, [pc, #196]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069a4:	2207      	movs	r2, #7
 80069a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069a8:	e009      	b.n	80069be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b80      	cmp	r3, #128	@ 0x80
 80069c8:	d0ef      	beq.n	80069aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069ca:	4b27      	ldr	r3, [pc, #156]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1c3 0307 	rsb	r3, r3, #7
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00b      	beq.n	80069ee <xPortStartScheduler+0xbe>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	60bb      	str	r3, [r7, #8]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <xPortStartScheduler+0x138>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a00:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <xPortStartScheduler+0x138>)
 8006a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a0c:	4b17      	ldr	r3, [pc, #92]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a16      	ldr	r2, [pc, #88]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a18:	4b14      	ldr	r3, [pc, #80]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	@ (8006a6c <xPortStartScheduler+0x13c>)
 8006a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a24:	f000 f8da 	bl	8006bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a28:	4b11      	ldr	r3, [pc, #68]	@ (8006a70 <xPortStartScheduler+0x140>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a2e:	f000 f8f9 	bl	8006c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <xPortStartScheduler+0x144>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a0f      	ldr	r2, [pc, #60]	@ (8006a74 <xPortStartScheduler+0x144>)
 8006a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a3e:	f7ff ff63 	bl	8006908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a42:	f7fe ff0b 	bl	800585c <vTaskSwitchContext>
	prvTaskExitError();
 8006a46:	f7ff ff19 	bl	800687c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	e000ed00 	.word	0xe000ed00
 8006a58:	410fc271 	.word	0x410fc271
 8006a5c:	410fc270 	.word	0x410fc270
 8006a60:	e000e400 	.word	0xe000e400
 8006a64:	20000f5c 	.word	0x20000f5c
 8006a68:	20000f60 	.word	0x20000f60
 8006a6c:	e000ed20 	.word	0xe000ed20
 8006a70:	2000001c 	.word	0x2000001c
 8006a74:	e000ef34 	.word	0xe000ef34

08006a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a92:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a0e      	ldr	r2, [pc, #56]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <vPortEnterCritical+0x5c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d110      	bne.n	8006ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad8 <vPortEnterCritical+0x60>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	603b      	str	r3, [r7, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <vPortEnterCritical+0x4a>
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000001c 	.word	0x2000001c
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <vPortExitCritical+0x50>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <vPortExitCritical+0x26>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	607b      	str	r3, [r7, #4]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	4a08      	ldr	r2, [pc, #32]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b0c:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <vPortExitCritical+0x50>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <vPortExitCritical+0x44>
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	2000001c 	.word	0x2000001c

08006b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	@ (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7fe fe7c 	bl	800585c <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
}
 8006bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bb2:	f7fe fd99 	bl	80056e8 <xTaskIncrementTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <xPortSysTickHandler+0x40>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <vPortSetupTimerInterrupt+0x38>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <vPortSetupTimerInterrupt+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006c1c <vPortSetupTimerInterrupt+0x40>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	099b      	lsrs	r3, r3, #6
 8006bf8:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <vPortSetupTimerInterrupt+0x44>)
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfe:	4b04      	ldr	r3, [pc, #16]	@ (8006c10 <vPortSetupTimerInterrupt+0x34>)
 8006c00:	2207      	movs	r2, #7
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	e000e010 	.word	0xe000e010
 8006c14:	e000e018 	.word	0xe000e018
 8006c18:	20000000 	.word	0x20000000
 8006c1c:	10624dd3 	.word	0x10624dd3
 8006c20:	e000e014 	.word	0xe000e014

08006c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c34 <vPortEnableVFP+0x10>
 8006c28:	6801      	ldr	r1, [r0, #0]
 8006c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c2e:	6001      	str	r1, [r0, #0]
 8006c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c32:	bf00      	nop
 8006c34:	e000ed88 	.word	0xe000ed88

08006c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c3e:	f3ef 8305 	mrs	r3, IPSR
 8006c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d915      	bls.n	8006c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c4a:	4a18      	ldr	r2, [pc, #96]	@ (8006cac <vPortValidateInterruptPriority+0x74>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c54:	4b16      	ldr	r3, [pc, #88]	@ (8006cb0 <vPortValidateInterruptPriority+0x78>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	7afa      	ldrb	r2, [r7, #11]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d20b      	bcs.n	8006c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <vPortValidateInterruptPriority+0x7c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb8 <vPortValidateInterruptPriority+0x80>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90b      	bls.n	8006c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	603b      	str	r3, [r7, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <vPortValidateInterruptPriority+0x62>
	}
 8006c9e:	bf00      	nop
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	e000e3f0 	.word	0xe000e3f0
 8006cb0:	20000f5c 	.word	0x20000f5c
 8006cb4:	e000ed0c 	.word	0xe000ed0c
 8006cb8:	20000f60 	.word	0x20000f60

08006cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	@ 0x28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cc8:	f7fe fc52 	bl	8005570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e40 <pvPortMalloc+0x184>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cd4:	f000 f924 	bl	8006f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8006e44 <pvPortMalloc+0x188>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 8095 	bne.w	8006e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01e      	beq.n	8006d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006cec:	2208      	movs	r2, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d015      	beq.n	8006d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f023 0307 	bic.w	r3, r3, #7
 8006d04:	3308      	adds	r3, #8
 8006d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <pvPortMalloc+0x6e>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	617b      	str	r3, [r7, #20]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d06f      	beq.n	8006e10 <pvPortMalloc+0x154>
 8006d30:	4b45      	ldr	r3, [pc, #276]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d86a      	bhi.n	8006e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d3a:	4b44      	ldr	r3, [pc, #272]	@ (8006e4c <pvPortMalloc+0x190>)
 8006d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d3e:	4b43      	ldr	r3, [pc, #268]	@ (8006e4c <pvPortMalloc+0x190>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d44:	e004      	b.n	8006d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d903      	bls.n	8006d62 <pvPortMalloc+0xa6>
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f1      	bne.n	8006d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d62:	4b37      	ldr	r3, [pc, #220]	@ (8006e40 <pvPortMalloc+0x184>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d051      	beq.n	8006e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4413      	add	r3, r2
 8006d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	2308      	movs	r3, #8
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d920      	bls.n	8006dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <pvPortMalloc+0xfc>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dca:	69b8      	ldr	r0, [r7, #24]
 8006dcc:	f000 f90a 	bl	8006fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dde:	4b1a      	ldr	r3, [pc, #104]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <pvPortMalloc+0x194>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d203      	bcs.n	8006df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dea:	4b17      	ldr	r3, [pc, #92]	@ (8006e48 <pvPortMalloc+0x18c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <pvPortMalloc+0x194>)
 8006df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b13      	ldr	r3, [pc, #76]	@ (8006e44 <pvPortMalloc+0x188>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <pvPortMalloc+0x198>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a11      	ldr	r2, [pc, #68]	@ (8006e54 <pvPortMalloc+0x198>)
 8006e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e10:	f7fe fbbc 	bl	800558c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <pvPortMalloc+0x17a>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	60fb      	str	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <pvPortMalloc+0x176>
	return pvReturn;
 8006e36:	69fb      	ldr	r3, [r7, #28]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3728      	adds	r7, #40	@ 0x28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20004b6c 	.word	0x20004b6c
 8006e44:	20004b80 	.word	0x20004b80
 8006e48:	20004b70 	.word	0x20004b70
 8006e4c:	20004b64 	.word	0x20004b64
 8006e50:	20004b74 	.word	0x20004b74
 8006e54:	20004b78 	.word	0x20004b78

08006e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04f      	beq.n	8006f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	425b      	negs	r3, r3
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4413      	add	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b25      	ldr	r3, [pc, #148]	@ (8006f14 <vPortFree+0xbc>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10b      	bne.n	8006e9e <vPortFree+0x46>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60fb      	str	r3, [r7, #12]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <vPortFree+0x66>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60bb      	str	r3, [r7, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <vPortFree+0xbc>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01e      	beq.n	8006f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11a      	bne.n	8006f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f14 <vPortFree+0xbc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	43db      	mvns	r3, r3
 8006ede:	401a      	ands	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ee4:	f7fe fb44 	bl	8005570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <vPortFree+0xc0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4a09      	ldr	r2, [pc, #36]	@ (8006f18 <vPortFree+0xc0>)
 8006ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ef6:	6938      	ldr	r0, [r7, #16]
 8006ef8:	f000 f874 	bl	8006fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <vPortFree+0xc4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3301      	adds	r3, #1
 8006f02:	4a06      	ldr	r2, [pc, #24]	@ (8006f1c <vPortFree+0xc4>)
 8006f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f06:	f7fe fb41 	bl	800558c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20004b80 	.word	0x20004b80
 8006f18:	20004b70 	.word	0x20004b70
 8006f1c:	20004b7c 	.word	0x20004b7c

08006f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f2c:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <prvHeapInit+0xac>)
 8006f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3307      	adds	r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0307 	bic.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006fcc <prvHeapInit+0xac>)
 8006f50:	4413      	add	r3, r2
 8006f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f58:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <prvHeapInit+0xb0>)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd0 <prvHeapInit+0xb0>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a15      	ldr	r2, [pc, #84]	@ (8006fd4 <prvHeapInit+0xb4>)
 8006f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f82:	4b14      	ldr	r3, [pc, #80]	@ (8006fd4 <prvHeapInit+0xb4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2200      	movs	r2, #0
 8006f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f8a:	4b12      	ldr	r3, [pc, #72]	@ (8006fd4 <prvHeapInit+0xb4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <prvHeapInit+0xb4>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd8 <prvHeapInit+0xb8>)
 8006fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	4a09      	ldr	r2, [pc, #36]	@ (8006fdc <prvHeapInit+0xbc>)
 8006fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fb8:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <prvHeapInit+0xc0>)
 8006fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fbe:	601a      	str	r2, [r3, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	20000f64 	.word	0x20000f64
 8006fd0:	20004b64 	.word	0x20004b64
 8006fd4:	20004b6c 	.word	0x20004b6c
 8006fd8:	20004b74 	.word	0x20004b74
 8006fdc:	20004b70 	.word	0x20004b70
 8006fe0:	20004b80 	.word	0x20004b80

08006fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fec:	4b28      	ldr	r3, [pc, #160]	@ (8007090 <prvInsertBlockIntoFreeList+0xac>)
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e002      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x14>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d8f7      	bhi.n	8006ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d108      	bne.n	8007026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d118      	bne.n	800706c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b15      	ldr	r3, [pc, #84]	@ (8007094 <prvInsertBlockIntoFreeList+0xb0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d00d      	beq.n	8007062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e008      	b.n	8007074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <prvInsertBlockIntoFreeList+0xb0>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e003      	b.n	8007074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d002      	beq.n	8007082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007082:	bf00      	nop
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20004b64 	.word	0x20004b64
 8007094:	20004b6c 	.word	0x20004b6c

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <_reclaim_reent>:
 80070a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007160 <_reclaim_reent+0xb8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4283      	cmp	r3, r0
 80070ae:	b570      	push	{r4, r5, r6, lr}
 80070b0:	4604      	mov	r4, r0
 80070b2:	d053      	beq.n	800715c <_reclaim_reent+0xb4>
 80070b4:	69c3      	ldr	r3, [r0, #28]
 80070b6:	b31b      	cbz	r3, 8007100 <_reclaim_reent+0x58>
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	b163      	cbz	r3, 80070d6 <_reclaim_reent+0x2e>
 80070bc:	2500      	movs	r5, #0
 80070be:	69e3      	ldr	r3, [r4, #28]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	5959      	ldr	r1, [r3, r5]
 80070c4:	b9b1      	cbnz	r1, 80070f4 <_reclaim_reent+0x4c>
 80070c6:	3504      	adds	r5, #4
 80070c8:	2d80      	cmp	r5, #128	@ 0x80
 80070ca:	d1f8      	bne.n	80070be <_reclaim_reent+0x16>
 80070cc:	69e3      	ldr	r3, [r4, #28]
 80070ce:	4620      	mov	r0, r4
 80070d0:	68d9      	ldr	r1, [r3, #12]
 80070d2:	f000 f87b 	bl	80071cc <_free_r>
 80070d6:	69e3      	ldr	r3, [r4, #28]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	b111      	cbz	r1, 80070e2 <_reclaim_reent+0x3a>
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 f875 	bl	80071cc <_free_r>
 80070e2:	69e3      	ldr	r3, [r4, #28]
 80070e4:	689d      	ldr	r5, [r3, #8]
 80070e6:	b15d      	cbz	r5, 8007100 <_reclaim_reent+0x58>
 80070e8:	4629      	mov	r1, r5
 80070ea:	4620      	mov	r0, r4
 80070ec:	682d      	ldr	r5, [r5, #0]
 80070ee:	f000 f86d 	bl	80071cc <_free_r>
 80070f2:	e7f8      	b.n	80070e6 <_reclaim_reent+0x3e>
 80070f4:	680e      	ldr	r6, [r1, #0]
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 f868 	bl	80071cc <_free_r>
 80070fc:	4631      	mov	r1, r6
 80070fe:	e7e1      	b.n	80070c4 <_reclaim_reent+0x1c>
 8007100:	6961      	ldr	r1, [r4, #20]
 8007102:	b111      	cbz	r1, 800710a <_reclaim_reent+0x62>
 8007104:	4620      	mov	r0, r4
 8007106:	f000 f861 	bl	80071cc <_free_r>
 800710a:	69e1      	ldr	r1, [r4, #28]
 800710c:	b111      	cbz	r1, 8007114 <_reclaim_reent+0x6c>
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f85c 	bl	80071cc <_free_r>
 8007114:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007116:	b111      	cbz	r1, 800711e <_reclaim_reent+0x76>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 f857 	bl	80071cc <_free_r>
 800711e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007120:	b111      	cbz	r1, 8007128 <_reclaim_reent+0x80>
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f852 	bl	80071cc <_free_r>
 8007128:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800712a:	b111      	cbz	r1, 8007132 <_reclaim_reent+0x8a>
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f84d 	bl	80071cc <_free_r>
 8007132:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007134:	b111      	cbz	r1, 800713c <_reclaim_reent+0x94>
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f848 	bl	80071cc <_free_r>
 800713c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800713e:	b111      	cbz	r1, 8007146 <_reclaim_reent+0x9e>
 8007140:	4620      	mov	r0, r4
 8007142:	f000 f843 	bl	80071cc <_free_r>
 8007146:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007148:	b111      	cbz	r1, 8007150 <_reclaim_reent+0xa8>
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f83e 	bl	80071cc <_free_r>
 8007150:	6a23      	ldr	r3, [r4, #32]
 8007152:	b11b      	cbz	r3, 800715c <_reclaim_reent+0xb4>
 8007154:	4620      	mov	r0, r4
 8007156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800715a:	4718      	bx	r3
 800715c:	bd70      	pop	{r4, r5, r6, pc}
 800715e:	bf00      	nop
 8007160:	20000020 	.word	0x20000020

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	4d0d      	ldr	r5, [pc, #52]	@ (800719c <__libc_init_array+0x38>)
 8007168:	4c0d      	ldr	r4, [pc, #52]	@ (80071a0 <__libc_init_array+0x3c>)
 800716a:	1b64      	subs	r4, r4, r5
 800716c:	10a4      	asrs	r4, r4, #2
 800716e:	2600      	movs	r6, #0
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	4d0b      	ldr	r5, [pc, #44]	@ (80071a4 <__libc_init_array+0x40>)
 8007176:	4c0c      	ldr	r4, [pc, #48]	@ (80071a8 <__libc_init_array+0x44>)
 8007178:	f000 f87e 	bl	8007278 <_init>
 800717c:	1b64      	subs	r4, r4, r5
 800717e:	10a4      	asrs	r4, r4, #2
 8007180:	2600      	movs	r6, #0
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f855 3b04 	ldr.w	r3, [r5], #4
 800718c:	4798      	blx	r3
 800718e:	3601      	adds	r6, #1
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	f855 3b04 	ldr.w	r3, [r5], #4
 8007196:	4798      	blx	r3
 8007198:	3601      	adds	r6, #1
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	080074e0 	.word	0x080074e0
 80071a0:	080074e0 	.word	0x080074e0
 80071a4:	080074e0 	.word	0x080074e0
 80071a8:	080074e4 	.word	0x080074e4

080071ac <__retarget_lock_acquire_recursive>:
 80071ac:	4770      	bx	lr

080071ae <__retarget_lock_release_recursive>:
 80071ae:	4770      	bx	lr

080071b0 <memcpy>:
 80071b0:	440a      	add	r2, r1
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b8:	d100      	bne.n	80071bc <memcpy+0xc>
 80071ba:	4770      	bx	lr
 80071bc:	b510      	push	{r4, lr}
 80071be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c6:	4291      	cmp	r1, r2
 80071c8:	d1f9      	bne.n	80071be <memcpy+0xe>
 80071ca:	bd10      	pop	{r4, pc}

080071cc <_free_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4605      	mov	r5, r0
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d041      	beq.n	8007258 <_free_r+0x8c>
 80071d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d8:	1f0c      	subs	r4, r1, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfb8      	it	lt
 80071de:	18e4      	addlt	r4, r4, r3
 80071e0:	f000 f83e 	bl	8007260 <__malloc_lock>
 80071e4:	4a1d      	ldr	r2, [pc, #116]	@ (800725c <_free_r+0x90>)
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	b933      	cbnz	r3, 80071f8 <_free_r+0x2c>
 80071ea:	6063      	str	r3, [r4, #4]
 80071ec:	6014      	str	r4, [r2, #0]
 80071ee:	4628      	mov	r0, r5
 80071f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f4:	f000 b83a 	b.w	800726c <__malloc_unlock>
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d908      	bls.n	800720e <_free_r+0x42>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428b      	cmp	r3, r1
 8007202:	bf01      	itttt	eq
 8007204:	6819      	ldreq	r1, [r3, #0]
 8007206:	685b      	ldreq	r3, [r3, #4]
 8007208:	1809      	addeq	r1, r1, r0
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	e7ed      	b.n	80071ea <_free_r+0x1e>
 800720e:	461a      	mov	r2, r3
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b10b      	cbz	r3, 8007218 <_free_r+0x4c>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d9fa      	bls.n	800720e <_free_r+0x42>
 8007218:	6811      	ldr	r1, [r2, #0]
 800721a:	1850      	adds	r0, r2, r1
 800721c:	42a0      	cmp	r0, r4
 800721e:	d10b      	bne.n	8007238 <_free_r+0x6c>
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	4401      	add	r1, r0
 8007224:	1850      	adds	r0, r2, r1
 8007226:	4283      	cmp	r3, r0
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	d1e0      	bne.n	80071ee <_free_r+0x22>
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	6053      	str	r3, [r2, #4]
 8007232:	4408      	add	r0, r1
 8007234:	6010      	str	r0, [r2, #0]
 8007236:	e7da      	b.n	80071ee <_free_r+0x22>
 8007238:	d902      	bls.n	8007240 <_free_r+0x74>
 800723a:	230c      	movs	r3, #12
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	e7d6      	b.n	80071ee <_free_r+0x22>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	1821      	adds	r1, r4, r0
 8007244:	428b      	cmp	r3, r1
 8007246:	bf04      	itt	eq
 8007248:	6819      	ldreq	r1, [r3, #0]
 800724a:	685b      	ldreq	r3, [r3, #4]
 800724c:	6063      	str	r3, [r4, #4]
 800724e:	bf04      	itt	eq
 8007250:	1809      	addeq	r1, r1, r0
 8007252:	6021      	streq	r1, [r4, #0]
 8007254:	6054      	str	r4, [r2, #4]
 8007256:	e7ca      	b.n	80071ee <_free_r+0x22>
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	20004cc0 	.word	0x20004cc0

08007260 <__malloc_lock>:
 8007260:	4801      	ldr	r0, [pc, #4]	@ (8007268 <__malloc_lock+0x8>)
 8007262:	f7ff bfa3 	b.w	80071ac <__retarget_lock_acquire_recursive>
 8007266:	bf00      	nop
 8007268:	20004cbc 	.word	0x20004cbc

0800726c <__malloc_unlock>:
 800726c:	4801      	ldr	r0, [pc, #4]	@ (8007274 <__malloc_unlock+0x8>)
 800726e:	f7ff bf9e 	b.w	80071ae <__retarget_lock_release_recursive>
 8007272:	bf00      	nop
 8007274:	20004cbc 	.word	0x20004cbc

08007278 <_init>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr

08007284 <_fini>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr
